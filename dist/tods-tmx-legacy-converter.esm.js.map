{"version":3,"file":"tods-tmx-legacy-converter.esm.js","sources":["../src/convertTieFormat.js","../src/matchFormatCode.js","../src/scoreFormat.js","../src/dateFx.js","../src/extractMatchUp.js","../src/utilities.js","../src/typeCheck.js","../src/courtFx.js","../src/scoreFx.js","../src/UUID.js","../src/drawFx.js","../src/matchFx.js","../src/getStructureContent.js","../src/extractStructures.js","../src/extractEvents.js","../src/extractParticipants.js","../src/extractTournamentInfo.js","../src/index.js"],"sourcesContent":["import { utilities } from \"tods-competition-factory\";\n\nexport function convertTieFormat(matchorder) {\n  const matchUpTypes = utilities.unique(\n    matchorder.map(({ format }) => format.toUpperCase())\n  );\n  const collectionDefinitions = matchUpTypes.map((matchUpType) => {\n    const collectionMatchUps = matchorder.filter(\n      (order) => order.format.toUpperCase() === matchUpType\n    );\n    const collectionValue =\n      collectionMatchUps\n        ?.map(({ value }) => parseFloat(value))\n        .filter((value) => !isNaN(value))\n        .reduce((a, b) => a + b, 0) || 0;\n\n    const collectionValueProfile = (collectionMatchUps || []).map(\n      (matchUp, index) => ({\n        collectionPosition: index + 1,\n        matchUpValue: parseFloat(matchUp.value),\n      })\n    );\n    const collectionDefinition = {\n      matchUpsCount: collectionMatchUps.length,\n      collectionName: matchUpType,\n      collectionId: utilities.UUID(),\n      collectionValue,\n      matchUpType,\n    };\n\n    const valuesDiffer =\n      utilities.unique(\n        collectionValueProfile.map(({ matchUpValue }) => matchUpValue)\n      ).length > 1;\n\n    if (valuesDiffer) {\n      // if not all collection matchUpValues are equal, add collectionValueProfile...\n      collectionDefinition.collectionValueProfile = collectionValueProfile;\n    } else {\n      // ...otherwise just add matchUpValue\n      collectionDefinition.matchUpValue =\n        collectionValueProfile[0].matchUpValue;\n    }\n\n    return collectionDefinition;\n  });\n\n  const totalTieValue = collectionDefinitions\n    .map(({ collectionValue }) => collectionValue)\n    .reduce((a, b) => a + b);\n\n  // TMX 1.9 valueGoals were always 1 more than half\n  const valueGoal = Math.floor(totalTieValue / 2) + 1;\n  const winCriteria = { valueGoal };\n\n  return { collectionDefinitions, winCriteria };\n}\n","/*\n * TODO: if the final set is NOT different then don't include in string\n */\n\nconst SET = \"SET\";\nconst NOAD = \"NOAD\";\nconst TIMED = \"timed\";\nconst FINAL = \"final\";\nconst NORMAL = \"normal\";\nconst setTypes = {\n  S: NORMAL,\n  F: FINAL,\n};\n\nexport const matchFormatCode = (function () {\n  let fx = {};\n\n  fx.stringify = (matchformatobject) => {\n    if (matchformatobject && typeof matchformatobject === \"object\") {\n      if (matchformatobject.timed && !isNaN(matchformatobject.minutes))\n        return timedFormat(matchformatobject);\n      if (matchformatobject.bestOf && matchformatobject.setFormat)\n        return setFormat(matchformatobject);\n    }\n  };\n\n  function timedFormat(matchformatobject) {\n    return `T${matchformatobject.minutes}`;\n  }\n\n  function setFormat(matchformatobject) {\n    let best_of = getNumber(matchformatobject.bestOf);\n    let bestOf = (best_of && `${SET}${best_of}`) || \"\";\n    let normal_set = stringifySet(matchformatobject.setFormat);\n    let normalSet = (normal_set && `S:${normal_set}`) || \"\";\n    let final_set = stringifySet(matchformatobject.finalSetFormat);\n    let finalSet =\n      (best_of > 1 && final_set && !final_set.invalid && `F:${final_set}`) ||\n      \"\";\n    let valid =\n      bestOf &&\n      normal_set &&\n      !normal_set.invalid &&\n      (!final_set || !final_set.invalid);\n    if (valid) {\n      return [bestOf, normalSet, finalSet].filter((f) => f).join(\"-\");\n    }\n  }\n\n  function stringifySet(setobject) {\n    if (setobject) {\n      if (typeof setobject === \"object\") {\n        if (setobject.tiebreakSet) return tiebreakFormat(setobject.tiebreakSet);\n        let setTo = getNumber(setobject.setTo);\n        if (setTo) {\n          let NoAD = (setobject.NoAD && NOAD) || \"\";\n          let set_tiebreak = tiebreakFormat(setobject.tiebreakFormat);\n          let setTiebreak =\n            (set_tiebreak && !set_tiebreak.invalid && `/${set_tiebreak}`) || \"\";\n          let tiebreak_at = getNumber(setobject.tiebreakAt);\n          let tiebreakAt =\n            (tiebreak_at && tiebreak_at !== setTo && `@${tiebreak_at}`) || \"\";\n          let valid = !set_tiebreak || !set_tiebreak.invalid;\n          if (valid) {\n            return `${setTo}${NoAD}${setTiebreak}${tiebreakAt}`;\n          } else {\n            return { invalid: true };\n          }\n        } else {\n          return { invalid: true };\n        }\n      }\n    }\n  }\n\n  function tiebreakFormat(tieobject) {\n    if (tieobject) {\n      if (typeof tieobject === \"object\" && getNumber(tieobject.tiebreakTo)) {\n        return `TB${tieobject.tiebreakTo}${tieobject.NoAD ? NOAD : \"\"}`;\n      } else {\n        return { invalid: true };\n      }\n    }\n  }\n\n  fx.parse = (matchformatcode) => {\n    if (matchformatcode && typeof matchformatcode === \"string\") {\n      let type =\n        matchformatcode.indexOf(\"T\") === 0\n          ? \"timed\"\n          : matchformatcode.indexOf(SET) === 0\n          ? SET\n          : \"\";\n      if (type === TIMED) return timedMatch(matchformatcode);\n      if (type === SET) return setsMatch(matchformatcode);\n    }\n  };\n\n  function setsMatch(formatstring) {\n    let parts = formatstring.split(\"-\");\n\n    let bestOf = getNumber(parts[0].slice(3));\n    let setFormat = parts && parseSetFormat(parts[1]);\n    let finalSetFormat = parts && parseSetFormat(parts[2]);\n\n    let validBestOf = bestOf && bestOf < 6;\n    let validFinalSet =\n      !parts[2] || (finalSetFormat && !finalSetFormat.invalid);\n    let validSetsFormat = setFormat && !setFormat.invalid;\n\n    let result = { bestOf, setFormat };\n    if (finalSetFormat) result.finalSetFormat = finalSetFormat;\n    if (validBestOf && validSetsFormat && validFinalSet) return result;\n  }\n\n  function parseSetFormat(formatstring) {\n    if (formatstring && formatstring[1] === \":\") {\n      let parts = formatstring.split(\":\");\n      let set_type = setTypes[parts[0]];\n      let set_format = parts[1];\n      if (set_type && set_format) {\n        let tiebreakSet = set_format.indexOf(\"TB\") === 0;\n        if (tiebreakSet)\n          return { tiebreakSet: parseTiebreakFormat(set_format) };\n        let parts = formatstring.match(/^[FS]{1}:(\\d+)([A-Za-z]*)/);\n        let NoAD = (parts && isNoAD(parts[2])) || false;\n        let validNoAD = !parts || !parts[2] || NoAD;\n        let setTo = parts && getNumber(parts[1]);\n        let tiebreak_at = parseTiebreakAt(set_format);\n        let validTiebreakAt =\n          !tiebreak_at || (tiebreak_at && !tiebreak_at.invalid);\n        let tiebreakAt = (validTiebreakAt && tiebreak_at) || setTo;\n        let tiebreakFormat = parseTiebreakFormat(set_format.split(\"/\")[1]);\n        let validTiebreak = !tiebreakFormat || !tiebreakFormat.invalid;\n        let result = { setTo };\n        if (NoAD) result.NoAD = true;\n        if (tiebreakFormat) {\n          result.tiebreakFormat = tiebreakFormat;\n          result.tiebreakAt = tiebreakAt;\n        } else {\n          result.noTiebreak = true;\n        }\n        return (\n          (setTo &&\n            validNoAD &&\n            validTiebreak &&\n            validTiebreakAt &&\n            result) || { invalid: true }\n        );\n      }\n    }\n  }\n\n  function parseTiebreakAt(set_format) {\n    let tiebreak_at =\n      set_format && set_format.indexOf(\"@\") > 0 && set_format.split(\"@\");\n    if (tiebreak_at) {\n      let tiebreakAt = getNumber(tiebreak_at[1]);\n      return tiebreakAt || { invalid: true };\n    }\n  }\n\n  function parseTiebreakFormat(formatstring) {\n    if (formatstring) {\n      if (formatstring.indexOf(\"TB\") === 0) {\n        let parts = formatstring.match(/^TB(\\d+)([A-Za-z]*)/);\n        let tiebreak_to = parts && parts[1];\n        let NoAD = parts && isNoAD(parts[2]);\n        let validNoAD = !parts || !parts[2] || NoAD;\n        let tiebreakTo = getNumber(tiebreak_to);\n        if (tiebreakTo && validNoAD) {\n          let result = { tiebreakTo };\n          if (NoAD) result.NoAD = true;\n          return result;\n        } else {\n          return { invalid: true };\n        }\n      } else {\n        return { invalid: true };\n      }\n    }\n  }\n\n  function timedMatch(formatstring) {\n    let timestring = formatstring.slice(1);\n    let minutes = getNumber(timestring);\n    if (minutes) return { timed: true, minutes };\n  }\n\n  function isNoAD(formatstring) {\n    return formatstring && formatstring.indexOf(NOAD) >= 0;\n  }\n\n  function getNumber(formatstring) {\n    return !isNaN(Number(formatstring)) && Number(formatstring);\n  }\n\n  return fx;\n})();\n","/*\n   Convert legacy TMX score_format into JSON representation of TODS MatchFormatCode\n*/\nexport const scoreFormat = (function () {\n  let fx = {};\n\n  fx.jsonTODS = (score_format) => {\n    let tods = { bestOf: getNumber(score_format.max_sets) };\n\n    if (\n      score_format.max_sets &&\n      parseInt(score_format.max_sets) === 1 &&\n      score_format.final_set_supertiebreak\n    ) {\n      tods.setFormat = {\n        tiebreakSet: { tiebreakTo: score_format.supertiebreak_to },\n      };\n    } else {\n      const setTo = getNumber(score_format.games_for_set);\n      const tiebreaks_at = getNumber(score_format.tiereaks_at);\n      const tiebreakAt = tiebreaks_at > setTo ? setTo : tiebreaks_at;\n      tods.setFormat = {\n        setTo,\n        tiebreakAt,\n        tiebreakFormat: { tiebreakTo: getNumber(score_format.tiebreak_to) },\n      };\n      if (score_format.final_set_supertiebreak) {\n        tods.finalSetFormat = {\n          tiebreakSet: { tiebreakTo: score_format.supertiebreak_to },\n        };\n      }\n    }\n\n    return tods;\n  };\n\n  function getNumber(formatstring) {\n    return !isNaN(Number(formatstring)) && Number(formatstring);\n  }\n\n  return fx;\n})();\n","export const dateFx = (function () {\n  let fx = {};\n\n  fx.localizeDate = (date, date_localization, locale) => {\n    let default_localization = {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    };\n    return date.toLocaleDateString(\n      locale,\n      date_localization || default_localization\n    );\n  };\n\n  fx.timeSort = timeSort;\n  function timeSort(a, b) {\n    let as = splitTime(a);\n    let bs = splitTime(b);\n    if (parseInt(as.hours) < parseInt(bs.hours)) return -1;\n    if (parseInt(as.hours) > parseInt(bs.hours)) return 1;\n    if (as.hours === bs.hours) {\n      if (parseInt(as.minutes) < parseInt(bs.minutes)) return -1;\n      if (parseInt(as.minutes) > parseInt(bs.minutes)) return 1;\n    }\n    return 0;\n  }\n\n  function splitTime(value) {\n    value = value || \"00:00\";\n    let o = {},\n      time = {};\n    ({ 0: o.time, 1: o.ampm } = (value && value.split(\" \")) || \"\");\n    ({ 0: time.hours, 1: time.minutes } = (o.time && o.time.split(\":\")) || \"\");\n    time.ampm = o.ampm;\n    return time;\n  }\n\n  fx.militaryTime = (value, env) => {\n    let time = splitTime(value || env.schedule.default_time);\n    if (time.ampm && time.hours) {\n      if (time.ampm.toLowerCase() === \"pm\" && parseInt(time.hours) < 12)\n        time.hours = ((time.hours && parseInt(time.hours)) || 0) + 12;\n      if (time.ampm.toLowerCase() === \"am\" && time.hours === \"12\")\n        time.hours = \"00\";\n    }\n    return `${time.hours || \"12\"}:${time.minutes || \"00\"}`;\n  };\n\n  fx.regularTime = (value, env) => {\n    let time = splitTime(value || env.schedule.default_time);\n    if (time.ampm) return value;\n    if (time.hours > 12) {\n      time.hours -= 12;\n      time.ampm = \"PM\";\n    } else if (time.hours === \"12\") {\n      time.ampm = \"PM\";\n    } else if (time.hours === \"00\") {\n      time.hours = \"12\";\n      time.ampm = \"AM\";\n    } else {\n      time.ampm = \"AM\";\n    }\n    return `${time.hours || \"12\"}:${time.minutes || \"00\"} ${time.ampm}`;\n  };\n\n  fx.convertTime = (value, env) => {\n    return !env || env.schedule.time24\n      ? fx.militaryTime(value, env)\n      : fx.regularTime(value, env);\n  };\n\n  fx.addWeek = (date) => {\n    let now = new Date(date);\n    return now.setDate(now.getDate() + 7);\n  };\n  fx.subtractWeek = (date) => {\n    let now = new Date(date);\n    return now.setDate(now.getDate() - 7);\n  };\n  fx.getDateByWeek = getDateByWeek;\n  function getDateByWeek(week, year) {\n    let d = new Date(year, 0, 1);\n    let dayNum = d.getDay();\n    let requiredDate = --week * 7;\n    if (dayNum !== 0 || dayNum > 4) requiredDate += 7;\n    d.setDate(1 - d.getDay() + ++requiredDate);\n    return d;\n  }\n\n  // scoreboard\n  fx.HHMMSS = (s, format) => {\n    var sec_num = parseInt(s, 10); // don't forget the second param\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - hours * 3600) / 60);\n    var seconds = sec_num - hours * 3600 - minutes * 60;\n\n    let display_seconds = !format || (format && format.display_seconds);\n    let pad_hours = !format || (format && format.pad_hours);\n    if (hours < 10 && pad_hours) {\n      hours = \"0\" + hours;\n    }\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n    return display_seconds\n      ? hours + \":\" + minutes + \":\" + seconds\n      : hours + \":\" + minutes;\n  };\n\n  // unused\n  fx.weekDays = (date) => {\n    let dates = [0, 1, 2, 3, 4, 5, 6].map((i) => dayOfWeek(date, i));\n    return dates;\n\n    function dayOfWeek(date, index) {\n      let d = new Date(date);\n      let day = d.getDay();\n      let diff = index - day;\n      return new Date(d.setDate(d.getDate() + diff));\n    }\n  };\n\n  // exportFx\n  fx.ymd2date = ymd2date;\n  function ymd2date(ymd) {\n    let parts = ymd.split(\"-\");\n    if (!parts || parts.length !== 3) return new Date(ymd);\n    if (isNaN(parseInt(parts[1]))) return new Date(ymd);\n    return new Date(parts[0], parseInt(parts[1]) - 1, parts[2]);\n  }\n\n  // ** used frequently\n  fx.formatDate = formatDate;\n  function formatDate(date, separator = \"-\", format = \"YMD\") {\n    if (!date) return \"\";\n    if (!isNaN(date)) date = fx.offsetTime(date);\n\n    let d = new Date(date);\n    let month = \"\" + (d.getMonth() + 1);\n    let day = \"\" + d.getDate();\n    let year = d.getFullYear();\n\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n\n    if (format === \"DMY\") return [day, month, year].join(separator);\n    if (format === \"MDY\") return [month, day, year].join(separator);\n    if (format === \"YDM\") return [year, day, month].join(separator);\n    if (format === \"DYM\") return [day, year, month].join(separator);\n    if (format === \"MYD\") return [month, year, day].join(separator);\n    return [year, month, day].join(separator);\n  }\n\n  fx.offsetDate = (date) => {\n    var targetTime = date ? new Date(date) : new Date();\n    var tzDifference = targetTime.getTimezoneOffset();\n    return new Date(targetTime.getTime() + tzDifference * 60 * 1000);\n  };\n\n  fx.offsetTime = (date) => fx.offsetDate(date).getTime();\n\n  fx.validDate = (datestring, range) => {\n    if (!datestring) return false;\n    let dateparts = formatDate(datestring).split(\"-\");\n    if (isNaN(dateparts.join(\"\"))) return false;\n    if (dateparts.length !== 3) return false;\n    if (dateparts[0].length !== 4) return false;\n    if (+dateparts[1] > 12 || +dateparts[1] < 1) return false;\n    if (+dateparts[2] > 31 || +dateparts[2] < 1) return false;\n    if (range && range.start) {\n      if (fx.offsetDate(datestring) < fx.offsetDate(range.start)) return false;\n    }\n    if (range && range.end) {\n      if (fx.offsetDate(datestring) > fx.offsetDate(range.end)) return false;\n    }\n    if (new Date(datestring) === \"Invalid Date\") return false;\n    return true;\n  };\n\n  fx.isDate = (dateArg) => {\n    if (typeof dateArg == \"boolean\") return false;\n    var t =\n      dateArg instanceof Date\n        ? dateArg\n        : !isNaN(dateArg)\n        ? new Date(dateArg)\n        : false;\n    return t && !isNaN(t.valueOf());\n  };\n\n  function isValidDateRange(minDate, maxDate) {\n    return fx.offsetDate(minDate) <= fx.offsetDate(maxDate);\n  }\n\n  fx.timeUTC = (date) => {\n    let dateDate = new Date(date);\n    return Date.UTC(\n      dateDate.getFullYear(),\n      dateDate.getMonth(),\n      dateDate.getDate()\n    );\n  };\n\n  fx.dateFromDay = (year, day) => {\n    var date = new Date(year, 0); // initialize a date in `year-01-01`\n    return new Date(date.setDate(day)); // add the number of days\n  };\n  fx.randomDate = (start, end) =>\n    new Date(\n      start.getTime() + Math.random() * (end.getTime() - start.getTime())\n    );\n  fx.dateRange = (startDt, endDt) => {\n    let error =\n      fx.isDate(endDt) && fx.isDate(startDt) && isValidDateRange(startDt, endDt)\n        ? false\n        : true;\n    let between = [];\n    let iterations = 0;\n    let keep_looping = true;\n\n    if (error) {\n      console.log(\"error occured!!!... Please Enter Valid Dates\");\n    } else {\n      var currentDate = fx.offsetDate(startDt);\n      var end = fx.offsetDate(endDt);\n      while (currentDate <= end && keep_looping) {\n        iterations += 1;\n        if (iterations > 300) {\n          console.log(\"excessive while loop\");\n          keep_looping = false;\n        }\n        // must be a *new* Date otherwise it is an array of the same object\n        between.push(new Date(currentDate));\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n    }\n    return between;\n  };\n\n  // unused\n  fx.sameDay = (d1, d2) => {\n    return (\n      d1.getFullYear() === d2.getFullYear() &&\n      d1.getMonth() === d2.getMonth() &&\n      d1.getDate() === d2.getDate()\n    );\n  };\n\n  fx.futureDate = (days = 1) => {\n    let currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + days);\n    return currentDate;\n  };\n\n  return fx;\n})();\n","import { matchFormatCode } from \"./matchFormatCode\";\nimport { scoreFormat } from \"./scoreFormat\";\nimport { dateFx } from \"./dateFx\";\nimport {\n  participantRoles,\n  participantConstants,\n  entryStatusConstants,\n  matchUpStatusConstants,\n  mocksEngine,\n} from \"tods-competition-factory\";\n\nexport function extractMatchUp({\n  eventType,\n  seedLimit,\n  tieFormat,\n  entryStage,\n  legacyMatch,\n  participants,\n  matchUpFormat,\n  participantIds,\n  drawPositionOffset = 0,\n  tournamentEngine, // must pass in tournamentEngine that contains state with participants\n}) {\n  const matchUpId = legacyMatch.match?.muid || legacyMatch.muid;\n\n  const sides = [];\n  const entries = [];\n  const seedAssignments = [];\n  const missingParticipants = [];\n  const positionAssignments = [];\n\n  let isBye = false;\n  if (Array.isArray(legacyMatch.teams)) {\n    legacyMatch.teams.forEach((team, index) => {\n      if (!team?.length) return;\n\n      let participantId;\n      const individualParticipantIds = team\n        .map((player) => player?.id)\n        .filter((f) => f);\n\n      const player1 = team && team[0] && typeof team[0] === \"object\" && team[0];\n      const player2 = team && team[1] && typeof team[1] === \"object\" && team[1];\n      const drawPosition =\n        (player1?.draw_position || player2?.draw_position) + drawPositionOffset;\n      const seed = player1?.seed;\n      const bye = player1?.bye;\n\n      if (individualParticipantIds.length === 1) {\n        participantId = individualParticipantIds[0];\n      }\n      if (individualParticipantIds.length === 2) {\n        let { participant } = tournamentEngine.getPairedParticipant({\n          participantIds: individualParticipantIds,\n        });\n        if (!participant) {\n          ({ participant } = tournamentEngine.addParticipant({\n            participant: {\n              participantType: \"PAIR\",\n              participantRole: \"COMPETITOR\",\n              individualParticipantIds: [player1.id, player2.id],\n            },\n          }));\n          missingParticipants.push(participant);\n        }\n        participantId = participant?.participantId;\n      }\n\n      const side = { sideNumber: index + 1 };\n      if (drawPosition) side.drawPosition = drawPosition;\n      if (bye) {\n        side.bye = bye;\n        isBye = true;\n      }\n      if (participantId) {\n        side.participantId = participantId;\n      }\n      sides.push(side);\n\n      if (participantId && !participantIds.includes(participantId)) {\n        participantIds.push(participantId);\n        const entry = {\n          entryStage,\n          participantId,\n          entryStatus: entryStatusConstants.DIRECT_ACCEPTANCE,\n        };\n        entries.push(entry);\n        const positionAssignment = { drawPosition, participantId };\n        positionAssignments.push(positionAssignment);\n        if (seed && seed <= seedLimit) {\n          const seedAssignment = {\n            seedNumber: seed,\n            seedValue: seed, // TODO: check whether there is a seed display value in TMX 1.9\n            participantId,\n          };\n          seedAssignments.push(seedAssignment);\n        }\n      } else if (bye) {\n        const positionAssignment = { drawPosition, bye };\n        positionAssignments.push(positionAssignment);\n      }\n    });\n  }\n\n  const matchUpType =\n    eventType === \"TEAM\" ? legacyMatch.format?.toUpperCase() : eventType;\n\n  const collectionDefinition = tieFormat?.collectionDefinitions.find(\n    (collectionDefinition) => collectionDefinition.matchUpType === matchUpType\n  );\n  const collectionId = collectionDefinition?.collectionId;\n\n  const scoreString = legacyMatch.match?.score || legacyMatch.score || \"\";\n  const reversedScoreString = reverseScore(scoreString) || \"\";\n\n  let winner_index =\n    legacyMatch.match?.winner_index !== undefined &&\n    legacyMatch.match.winner_index;\n  if (![0, 1].includes(parseInt(winner_index)))\n    winner_index = legacyMatch.winner_index;\n  const winner = [0, 1].includes(parseInt(winner_index));\n  const winningSide = (winner && winner_index + 1) || undefined;\n  const scoreStringSide1 = matchTiebreakTODS(\n    !winner || winningSide === 1 ? scoreString : reversedScoreString\n  );\n  const scoreStringSide2 = matchTiebreakTODS(\n    !winner || winningSide === 1 ? reversedScoreString : scoreString\n  );\n  const sets = mocksEngine.parseScoreString({ scoreString: scoreStringSide1 });\n  const score = {\n    scoreStringSide1,\n    scoreStringSide2,\n    sets,\n  };\n\n  const time = scoreString.indexOf(\"TIME\") > 0;\n  const live = scoreString.indexOf(\"LIVE\") > 0;\n  const interrupted = scoreString.indexOf(\"INT\") > 0;\n  const incomplete = scoreString.indexOf(\"INC\") > 0;\n  const walkover = scoreString.indexOf(\"W.O.\") >= 0;\n  const cancelled = scoreString.indexOf(\"CCL\") >= 0;\n  const abandoned = scoreString.indexOf(\"ABD\") >= 0;\n  const defaulted = scoreString.indexOf(\"DEF\") >= 0;\n  const retired = scoreString.indexOf(\"RET\") > 0;\n  const matchUpStatus =\n    (live && matchUpStatusConstants.IN_PROGRESS) ||\n    (interrupted && matchUpStatusConstants.SUSPENDED) ||\n    (incomplete && matchUpStatusConstants.INCOMPLETE) ||\n    (walkover && matchUpStatusConstants.WALKOVER) ||\n    (cancelled && matchUpStatusConstants.NOT_PLAYED) ||\n    (abandoned && matchUpStatusConstants.ABANDONED) ||\n    (defaulted && matchUpStatusConstants.DEFAULTED) ||\n    (retired && matchUpStatusConstants.RETIRED) ||\n    (isBye && matchUpStatusConstants.BYE) ||\n    (winningSide && matchUpStatusConstants.COMPLETED) ||\n    (time && matchUpStatusConstants.COMPLETED) ||\n    (!winningSide && matchUpStatusConstants.TO_BE_PLAYED);\n\n  const timeItems = getTimeItems({ participants, legacyMatch });\n  const matchUp = {\n    matchUpId,\n    score,\n  };\n\n  const drawPositions = sides\n    ?.map((side) => side.drawPosition)\n    .filter((f) => f);\n  if (drawPositions?.length) matchUp.drawPositions = drawPositions;\n\n  if (sides?.length) matchUp.sides = sides;\n  if (matchUpType) matchUp.matchUpType = matchUpType;\n  if (winningSide) matchUp.winningSide = winningSide;\n  if (timeItems?.length) matchUp.timeItems = timeItems;\n  if (collectionId) matchUp.collectionId = collectionId;\n  if (matchUpStatus) matchUp.matchUpStatus = matchUpStatus;\n\n  const format = legacyMatch.match?.score_format || legacyMatch.score_format;\n  const formatCode =\n    format && matchFormatCode.stringify(scoreFormat.jsonTODS(format));\n  matchUpFormat = legacyMatch.match?.matchFormat || matchUpFormat;\n  if (formatCode || matchUpFormat)\n    matchUp.matchUpFormat = formatCode || matchUpFormat;\n\n  const collectionPosition = legacyMatch.sequence;\n  if (collectionPosition) {\n    matchUp.collectionPosition = collectionPosition;\n  }\n  return {\n    matchUp,\n    entries,\n    seedAssignments,\n    positionAssignments,\n    missingParticipants,\n  };\n}\n\nfunction getTimeItems({ participants, legacyMatch }) {\n  const timeItems = [];\n  const schedule = legacyMatch.match?.schedule || legacyMatch.schedule || {};\n  const umpire = legacyMatch.match?.umpire || legacyMatch.umpire;\n\n  if (schedule.luid && schedule.index) {\n    let timeItem = {\n      itemType: \"SCHEDULE.ASSIGNMENT.VENUE\",\n      itemValue: schedule.luid,\n      timeStamp: new Date().toISOString(), // TODO: should be the start date of the tournament\n    };\n    timeItems.push(timeItem);\n\n    timeItem = {\n      itemType: \"SCHEDULE.ASSIGNMENT.COURT\",\n      itemValue: `${schedule.luid}|${parseInt(schedule.index) - 1}`,\n      timeStamp: new Date().toISOString(), // TODO: should be the start date of the tournament\n    };\n    timeItems.push(timeItem);\n  }\n\n  if (schedule.day) {\n    const timeItem = {\n      itemType: \"SCHEDULED.DATE\",\n      itemValue: schedule.day,\n      timeStamp: new Date().toISOString(), // TODO: should be the start date of the tournament\n    };\n    timeItems.push(timeItem);\n\n    if (schedule.start) {\n      const startTime = properTime(schedule.start);\n      const startDateTime = `${dateFx.formatDate(schedule.day)}T${startTime}`;\n      const timeItem = {\n        itemType: \"SCHEDULE.TIME.START\",\n        itemValue: new Date(startDateTime).toISOString(),\n        timeStamp: new Date().toISOString(), // TODO: should be the start date of the tournament\n      };\n      timeItems.push(timeItem);\n    }\n\n    if (schedule.end) {\n      const endTime = properTime(schedule.end);\n      const endDateTime = `${dateFx.formatDate(schedule.day)}T${endTime}`;\n      const timeItem = {\n        itemType: \"SCHEDULE.TIME.END\",\n        itemValue: new Date(endDateTime).toISOString(),\n        timeStamp: new Date().toISOString(), // TODO: should be the start date of the tournament\n      };\n      timeItems.push(timeItem);\n    }\n  }\n\n  if (schedule.time) {\n    const itemValue = properTime(schedule.time);\n    const timeItem = {\n      itemType: \"SCHEDULE.TIME.SCHEDULED\",\n      itemValue,\n      timeStamp: new Date().toISOString(), // TODO: should be the start date of the tournament\n    };\n    timeItems.push(timeItem);\n  }\n\n  if (umpire) {\n    const tournamentOfficials = participants?.filter(\n      (participant) =>\n        participant.participantType === participantConstants.INDIVIDUAL &&\n        participant.participantRole === participantRoles.OFFICIAL\n    );\n    const official = tournamentOfficials.find(\n      (official) => official.name === umpire\n    );\n    const itemValue = official?.participantId;\n    const timeItem = {\n      itemType: \"SCHEDULE.ASSIGNMENT.OFFICIAL\",\n      itemValue,\n      timeStamp: new Date().toISOString(), // TODO: should be the start date of the tournament\n    };\n    if (itemValue) timeItems.push(timeItem);\n  }\n\n  return timeItems;\n}\n\nfunction properTime(time) {\n  const military = dateFx.militaryTime(time);\n  const zeroPad = (number) => (number.toString()[1] ? number : \"0\" + number);\n  return military\n    .split(\":\")\n    .map((part) => zeroPad(part))\n    .join(\":\");\n}\n\nfunction matchTiebreakTODS(score = \"\") {\n  return score\n    .split(\" \")\n    .map((set) => {\n      return set.includes(\"/\") ? matchTiebreak(set) : set;\n    })\n    .join(\" \");\n\n  function matchTiebreak(set) {\n    return `[${set.split(\"/\").join(\"-\")}]`;\n  }\n}\n\nfunction reverseScore(score, split = \" \") {\n  let irreversible = null;\n  if (score) {\n    let reversed = score.split(split).map(parseSet).join(split);\n    let result = irreversible ? `${irreversible} ${reversed}` : reversed;\n    return result;\n  }\n\n  function parseSet(set) {\n    let divider = set.indexOf(\"/\") > 0 ? \"/\" : \"-\";\n    let set_scores = set\n      .split(divider)\n      .map(parseSetScore)\n      .reverse()\n      .filter((f) => f);\n    let set_games = set_scores.map((s) => s.games);\n    let tb_scores = set_scores.map((s) => s.tiebreak).filter((f) => f);\n    let tiebreak = tb_scores.length === 1 ? `(${tb_scores[0]})` : \"\";\n    let set_score =\n      tb_scores.length < 2\n        ? set_games.join(divider)\n        : set_games.map((s, i) => `${s}(${tb_scores[i]})`).join(divider);\n    return `${set_score}${tiebreak}`;\n  }\n\n  function parseSetScore(set) {\n    let ss = /(\\d+)/;\n    let sst = /(\\d+)\\((\\d+)\\)/;\n    if (sst.test(set))\n      return { games: sst.exec(set)[1], tiebreak: sst.exec(set)[2] };\n    if (ss.test(set)) return { games: ss.exec(set)[1] };\n    irreversible = set;\n    return undefined;\n  }\n}\n","import {\n  eventConstants,\n  genderConstants,\n  drawDefinitionConstants,\n} from \"tods-competition-factory\";\n\nconst surfaceCategoryMap = {\n  C: \"CLAY\",\n  H: \"HARD\",\n  G: \"GRASS\",\n  R: \"CARPET\",\n};\n\nexport function getSurface(element) {\n  return surfaceCategoryMap[element?.surface];\n}\n\nexport function getIndoorOutdoor(element) {\n  return (\n    (element?.inout === \"o\" && \"OUTDOOR\") ||\n    (element?.inout === \"i\" && \"INDOOR\")\n  );\n}\n\nexport function intersection(a, b) {\n  return a\n    .filter((n) => b.indexOf(n) !== -1)\n    .filter((e, i, c) => c.indexOf(e) === i);\n}\n\nexport function getAgeCategoryCode(category) {\n  const categoryCodeMap = {\n    U10: \"10U\",\n    U12: \"12U\",\n    U14: \"14U\",\n    U16: \"16U\",\n    U18: \"18U\",\n    10: \"10U\",\n    12: \"12U\",\n    14: \"14U\",\n    16: \"16U\",\n    18: \"18U\",\n    Senior: \"O18\",\n  };\n\n  return categoryCodeMap[category];\n}\n\nexport function getMatchUpType(format) {\n  return (\n    ([\"S\", \"SINGLES\"].includes(format.toUpperCase()) &&\n      eventConstants.SINGLES) ||\n    ([\"D\", \"DOUBLES\"].includes(format.toUpperCase()) && eventConstants.DOUBLES)\n  );\n}\n\nexport function getGender(value) {\n  if (!value) return genderConstants.MIXED;\n  if ([\"F\", \"FEMALE\", \"W\", \"WOMAN\"].includes(value.toUpperCase()))\n    return genderConstants.FEMALE;\n  if ([\"M\", \"MALE\", \"MAN\"].includes(value.toUpperCase()))\n    return genderConstants.MALE;\n  return genderConstants.MIXED;\n}\n\nexport function getStage({ legacyEvent }) {\n  const stageMap = {\n    E: drawDefinitionConstants.MAIN,\n    Q: drawDefinitionConstants.QUALIFYING,\n    S: drawDefinitionConstants.MAIN,\n    C: drawDefinitionConstants.CONSOLATION,\n    P: drawDefinitionConstants.PLAY_OFF,\n    A: drawDefinitionConstants.MAIN,\n  };\n\n  if (legacyEvent.draw_type === \"R\") {\n    if (Object.keys(legacyEvent.links || {}).includes(\"E\")) {\n      return drawDefinitionConstants.QUALIFYING;\n    } else {\n      return drawDefinitionConstants.MAIN;\n    }\n  }\n\n  return stageMap[legacyEvent.draw_type];\n}\n","export const typeCheck = (function () {\n  let tc = {};\n\n  const FEED = \"feed\";\n  const SINGLES = \"singles\";\n  const DOUBLES = \"doubles\";\n  const BACKDRAW = \"backdraw\";\n\n  tc.isActiveEvent = ({ e }) => e && e.active;\n  tc.isAdHoc = ({ e }) => e && e.draw_type && e.draw_type === \"A\";\n  tc.isPlayoff = ({ e }) => e && e.draw_type && e.draw_type === \"P\";\n  tc.isQualifying = ({ e }) => e && e.draw_type && e.draw_type === \"Q\";\n  tc.isRoundRobin = ({ e }) => e && e.draw_type && e.draw_type === \"R\";\n  tc.isConsolation = ({ e }) => e && e.draw_type && e.draw_type === \"C\";\n  tc.isElimination = ({ e }) => e && e.draw_type && e.draw_type === \"E\";\n  tc.hasEliminationStructure = ({ e }) =>\n    e && e.draw_type && [\"E\", \"Q\", \"C\", \"P\", \"S\"].indexOf(e.draw_type) >= 0;\n  tc.isCompass = ({ e }) =>\n    e &&\n    ((e.draw_type && [\"S\", \"O\"].indexOf(e.draw_type) >= 0) ||\n      e.direction ||\n      (e.draw && e.draw.compass));\n\n  tc.isFeedIn = ({ e, value }) =>\n    (value && value === FEED) || (e && e.structure && e.structure === FEED);\n  tc.isBackdraw = ({ e, value }) =>\n    (value && value === BACKDRAW) ||\n    (e && e.structure && e.structure === BACKDRAW);\n\n  tc.hasRoundNames = ({ e }) =>\n    e && e.draw_type && [\"E\", \"S\", \"C\", \"O\"].indexOf(e.draw_type) >= 0;\n\n  tc.isConsolationFeedIn = ({ e }) =>\n    tc.isConsolation({ e }) && tc.isFeedIn({ e });\n  tc.isConsolationBackdraw = ({ e }) =>\n    tc.isConsolation({ e }) && tc.isBackdraw({ e });\n  tc.isConsolationFixed = ({ e }) =>\n    tc.isConsolation({ e }) && (tc.isFeedIn({ e }) || tc.isBackdraw({ e }));\n\n  tc.isSingles = ({ e, match }) => {\n    if (e)\n      return (\n        e.format && (e.format === \"S\" || e.format.toLowerCase() === SINGLES)\n      );\n    if (match)\n      return (\n        match.format &&\n        (match.format === \"S\" || match.format.toLowerCase() === SINGLES)\n      );\n  };\n  tc.isDoubles = ({ e, match }) => {\n    if (e)\n      return (\n        e.format && (e.format === \"D\" || e.format.toLowerCase() === DOUBLES)\n      );\n    if (match)\n      return (\n        match.format &&\n        (match.format === \"D\" || match.format.toLowerCase() === DOUBLES)\n      );\n  };\n\n  tc.isTeam = ({ tournament, e }) => {\n    if (tournament && tournament.type)\n      return [\"team\", \"dual\"].indexOf(tournament.type) >= 0;\n    let dual_draw = e && e.draw && e.draw.dual_matches;\n    return e && (dual_draw || e.event_type === \"dual\");\n  };\n\n  tc.isPreRound = ({ env, e }) => {\n    let qualifying_bracket_seeding =\n      env && env.drawFx && env.drawFx.qualifying_bracket_seeding;\n    return (\n      tc.isQualifying({ e }) &&\n      e.approved &&\n      e.approved.length &&\n      +e.qualifiers === e.draw_size / 2 &&\n      qualifying_bracket_seeding\n    );\n  };\n\n  return tc;\n})();\n","export function courtData(tournament, luid, max_matches_per_court = 14) {\n  let courts = [];\n  safeArr(tournament.locations).forEach((l) => {\n    let identifiers = l.identifiers ? l.identifiers.split(\",\") : [];\n    if (!luid || luid === l.luid) {\n      range(1, +l.courts + 1).forEach((index) => {\n        let identifier = identifiers[index - 1] || index;\n        let court = {\n          luid: l.luid,\n          name: `${l.abbreviation} ${identifier}`,\n          availability: range(1, max_matches_per_court + 1),\n          index,\n        };\n        courts.push(court);\n      });\n    }\n  });\n  return courts;\n}\n\nexport function ctuuid(schedule) {\n  return schedule ? `${schedule.luid}|${schedule.index}` : \"\";\n}\n\nfunction safeArr(x) {\n  return (\n    (Array.isArray(x) && x) ||\n    (typeof x === \"object\" && Object.keys(x).map((k) => x[k])) ||\n    []\n  );\n}\nfunction range(start, end) {\n  return Array.from({ length: end - start }, (v, k) => k + start);\n}\n","import { scoreFormat } from \"./scoreFormat\";\nimport { matchFormatCode } from \"./matchFormatCode\";\n\nexport const scoreFx = (function () {\n  let fx = {};\n\n  function validInt(value, invalid) {\n    let result = parseInt(value);\n    return isNaN(result) ? invalid : result;\n  }\n\n  // target is an object which *must* have all keys defined.\n  // preference is given to the *first* object processed\n  function assignKeys({ source = {}, objects = [] }) {\n    let target = Object.assign({}, source);\n    if (objects && !Array.isArray(objects)) objects = [objects];\n    objects = objects.filter((f) => f);\n    objects.forEach((o) => {\n      if (typeof o !== \"object\") return;\n      let keys = Object.keys(o);\n      keys.forEach(\n        (k) => (target[k] = target[k] !== undefined ? target[k] : o[k])\n      );\n    });\n    return target;\n  }\n\n  fx.setsToWin = (best_of) => (best_of && Math.ceil(best_of / 2)) || 1;\n  fx.tiebreakTo = (o, isFinalSet) => {\n    let setTiebreakTo =\n      o &&\n      o.setFormat &&\n      o.setFormat.tiebreakFormat &&\n      o.setFormat.tiebreakFormat.tiebreakTo;\n    let finalSetTiebreakTo =\n      o &&\n      o.finalSetFormat &&\n      o.finalSetFormat.tiebreakFormat &&\n      o.finalSetFormat.tiebreakFormat.tiebreakTo;\n    return isFinalSet ? finalSetTiebreakTo : setTiebreakTo;\n  };\n\n  fx.matchFormat = matchFormat;\n  function matchFormat(matchFormat) {\n    return (matchFormat || \"SET3-S:6/TB7\").slice(3);\n  }\n\n  fx.getExistingScores = ({ match }) => {\n    if (!match || !match.score) return undefined;\n    let es = convertStringScore({\n      string_score: match.score,\n      winner_index: match.winner_index,\n      matchFormat: match.matchFormat,\n    });\n    return es;\n  };\n\n  fx.generateMatchFormat = ({ cfg_obj }) => {\n    let bestof = cfg_obj.bestof.ddlb.getValue();\n    let max_sets = validInt(bestof);\n    let sets_to_win = scoreFx.setsToWin(max_sets);\n    let score_format = {\n      max_sets,\n      sets_to_win,\n      games_for_set: validInt(cfg_obj.setsto.ddlb.getValue()),\n      tiebreaks_at: validInt(cfg_obj.tiebreaksat.ddlb.getValue()) || \"\", // only option that can be 'none'\n      tiebreak_to: validInt(cfg_obj.tiebreaksto.ddlb.getValue()),\n      supertiebreak_to: validInt(cfg_obj.supertiebreakto.ddlb.getValue()),\n      final_set_supertiebreak:\n        cfg_obj.finalset.ddlb.getValue() === \"N\" ? false : true,\n    };\n\n    let matchFormat = matchFormatCode.stringify(\n      scoreFormat.jsonTODS(score_format)\n    );\n\n    return { matchFormat, score_format };\n  };\n\n  fx.getScoringFormat = ({ e, match }) => {\n    let format =\n      (match && match.format) || (e.format === \"D\" ? \"doubles\" : \"singles\");\n\n    let objects = [\n      match && match.score_format,\n      match && match.match && match.match.score_format,\n      e.scoring_format && e.scoring_format[format],\n      e.score_format,\n    ];\n\n    let score_format = assignKeys({ objects });\n\n    return score_format;\n  };\n\n  fx.defaultMatchFormat = ({ format, category, env }) => {\n    let matchFormats = env.scoreboard.matchFormats;\n    let formats = { S: \"singles\", D: \"doubles\" };\n    if (Object.keys(formats).indexOf(format) >= 0) format = formats[format];\n    if (\n      format &&\n      category &&\n      matchFormats.categories[category] &&\n      matchFormats.categories[category][format]\n    )\n      return matchFormats.categories[category][format];\n    if (format && matchFormats[format]) return matchFormats[format];\n    return matchFormats.singles;\n  };\n\n  fx.convertStringScore = convertStringScore;\n  function convertStringScore({\n    string_score,\n    winner_index,\n    split = \" \",\n    matchFormat,\n  }) {\n    if (!string_score) return [];\n\n    string_score = winner_index ? reverseScore(string_score) : string_score;\n\n    let outcome = null;\n    let ss = /(\\d+)/;\n    let sst = /(\\d+)\\((\\d+)\\)/;\n    let match_format = matchFormatCode.parse(matchFormat);\n\n    let sets = string_score\n      .split(split)\n      .filter((f) => f)\n      .map((set) => {\n        if (set.indexOf(\"/\") > 0) {\n          // look for supertiebreak scores using #/# format\n          let scores = set\n            .split(\"/\")\n            .map((m) => (ss.exec(m) ? { games: +ss.exec(m)[1] } : undefined))\n            .filter((f) => f);\n          if (scores.length === 2) return scores;\n        }\n\n        // uglifier doesn't work if variable is undefined\n        let tbscore = null;\n        let scores = set.split(\"-\").map((m) => {\n          let score;\n          if (sst.test(m)) {\n            tbscore = +sst.exec(m)[2];\n            score = { games: +sst.exec(m)[1] };\n          } else if (ss.test(m)) {\n            score = { games: +ss.exec(m)[1] };\n          } else {\n            outcome = m;\n          }\n          return score || undefined;\n        });\n\n        // filter out undefined scores\n        scores = scores.filter((f) => f);\n\n        // add spacer for score without tiebreak score\n        if (tbscore !== null) {\n          let min_games = Math.min(...scores.map((s) => s.games));\n          scores.forEach((sf) => {\n            if (+sf.games === +min_games) {\n              sf.tiebreak = tbscore;\n            } else {\n              sf.spacer = tbscore;\n            }\n          });\n        }\n\n        return scores;\n      });\n\n    // filter out sets without two scores\n    sets = sets.filter((scores) => scores && scores.length === 2);\n\n    // determine if set is supertiebreak\n    sets.forEach((st, i) => {\n      let set_format =\n        match_format && (match_format.finalSetFormat || match_format.setFormat);\n      let supertiebreak_to =\n        set_format &&\n        set_format.tiebreakSet &&\n        set_format.tiebreakSet.tiebreakTo;\n\n      if (st[0].games >= supertiebreak_to || st[1].games >= supertiebreak_to) {\n        st[0].supertiebreak = st[0].games;\n        st[1].supertiebreak = st[1].games;\n        delete st[0].games;\n        delete st[1].games;\n      }\n    });\n\n    if (winner_index !== undefined) {\n      sets.winner_index = winner_index;\n    }\n\n    if (outcome) {\n      if (outcome === \"Cancelled\") sets.cancelled = true;\n      if (outcome === \"Abandoned\") sets.abandoned = true;\n      if (outcome === \"INC.\") sets.incomplete = true;\n      if (outcome === \"INT.\") sets.interrupted = true;\n      if (outcome === \"LIVE\") sets.live = true;\n      if (outcome === \"TIME\") sets.time = true;\n      if (outcome === \"DEF.\") sets.default = true;\n      if (outcome === \"W.O.\") sets.walkover = true;\n\n      if (!sets.length) return sets;\n\n      // passing additional detail from string parse...\n      if (winner_index !== undefined) {\n        // outcomes are attributed to loser...\n        sets[sets.length - 1][1 - winner_index].outcome = outcome;\n        // and set as attribute on set\n        sets[sets.length - 1].outcome = outcome;\n        sets.outome = outcome;\n      }\n    }\n\n    return sets;\n  }\n\n  fx.reverseScore = reverseScore;\n  function reverseScore(score, split = \" \") {\n    let irreversible = null;\n    if (score) {\n      let reversed = score.split(split).map(parseSet).join(split);\n      let result = irreversible ? `${irreversible} ${reversed}` : reversed;\n      return result;\n    }\n\n    function parseSet(set) {\n      let divider = set.indexOf(\"/\") > 0 ? \"/\" : \"-\";\n      let set_scores = set\n        .split(divider)\n        .map(parseSetScore)\n        .reverse()\n        .filter((f) => f);\n      let set_games = set_scores.map((s) => s.games);\n      let tb_scores = set_scores.map((s) => s.tiebreak).filter((f) => f);\n      let tiebreak = tb_scores.length === 1 ? `(${tb_scores[0]})` : \"\";\n      let set_score =\n        tb_scores.length < 2\n          ? set_games.join(divider)\n          : set_games.map((s, i) => `${s}(${tb_scores[i]})`).join(divider);\n      return `${set_score}${tiebreak}`;\n    }\n\n    function parseSetScore(set) {\n      let ss = /(\\d+)/;\n      let sst = /(\\d+)\\((\\d+)\\)/;\n      if (sst.test(set))\n        return { games: sst.exec(set)[1], tiebreak: sst.exec(set)[2] };\n      if (ss.test(set)) return { games: ss.exec(set)[1] };\n      irreversible = set;\n      return undefined;\n    }\n  }\n\n  return fx;\n})();\n","/**\n * Fast UUID generator, RFC4122 version 4 compliant.\n * @author Jeff Ward (jcward.com).\n * @license MIT license\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n * ... and ...\n * https://codepen.io/avesus/pen/wgQmaV\n **/\nexport const UUID = (function () {\n  let self = {};\n  let lut = [];\n  for (var i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? \"0\" : \"\") + i.toString(16);\n  }\n\n  let getWindow = () => {\n    try {\n      return window;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  let formatUuid = ({ d0, d1, d2, d3 }) =>\n    // eslint-disable-next-line no-mixed-operators\n    lut[d0 & 0xff] +\n    lut[(d0 >> 8) & 0xff] +\n    lut[(d0 >> 16) & 0xff] +\n    lut[(d0 >> 24) & 0xff] +\n    \"-\" +\n    // eslint-disable-next-line no-mixed-operators\n    lut[d1 & 0xff] +\n    lut[(d1 >> 8) & 0xff] +\n    \"-\" +\n    // eslint-disable-next-line no-mixed-operators\n    lut[((d1 >> 16) & 0x0f) | 0x40] +\n    lut[(d1 >> 24) & 0xff] +\n    \"-\" +\n    // eslint-disable-next-line no-mixed-operators\n    lut[(d2 & 0x3f) | 0x80] +\n    lut[(d2 >> 8) & 0xff] +\n    \"-\" +\n    // eslint-disable-next-line no-mixed-operators\n    lut[(d2 >> 16) & 0xff] +\n    lut[(d2 >> 24) & 0xff] +\n    // eslint-disable-next-line no-mixed-operators\n    lut[d3 & 0xff] +\n    lut[(d3 >> 8) & 0xff] +\n    // eslint-disable-next-line no-mixed-operators\n    lut[(d3 >> 16) & 0xff] +\n    lut[(d3 >> 24) & 0xff];\n\n  let getRandomValuesFunc =\n    getWindow() && getWindow().crypto && getWindow().crypto.getRandomValues\n      ? () => {\n          const dvals = new Uint32Array(4);\n          getWindow().crypto.getRandomValues(dvals);\n          return {\n            d0: dvals[0],\n            d1: dvals[1],\n            d2: dvals[2],\n            d3: dvals[3],\n          };\n        }\n      : () => ({\n          d0: (Math.random() * 0x100000000) >>> 0,\n          d1: (Math.random() * 0x100000000) >>> 0,\n          d2: (Math.random() * 0x100000000) >>> 0,\n          d3: (Math.random() * 0x100000000) >>> 0,\n        });\n\n  self.new = () => formatUuid(getRandomValuesFunc());\n\n  self.idGen = () => `u_${self.generate()}`;\n  self.generate = function () {\n    var d0 = (Math.random() * 0xffffffff) | 0;\n    var d1 = (Math.random() * 0xffffffff) | 0;\n    var d2 = (Math.random() * 0xffffffff) | 0;\n    var d3 = (Math.random() * 0xffffffff) | 0;\n    // eslint-disable-next-line no-mixed-operators\n    return (\n      lut[d0 & 0xff] +\n      lut[(d0 >> 8) & 0xff] +\n      lut[(d0 >> 16) & 0xff] +\n      lut[(d0 >> 24) & 0xff] +\n      \"-\" +\n      // eslint-disable-next-line no-mixed-operators\n      lut[d1 & 0xff] +\n      lut[(d1 >> 8) & 0xff] +\n      \"-\" +\n      lut[((d1 >> 16) & 0x0f) | 0x40] +\n      lut[(d1 >> 24) & 0xff] +\n      \"-\" +\n      // eslint-disable-next-line no-mixed-operators\n      lut[(d2 & 0x3f) | 0x80] +\n      lut[(d2 >> 8) & 0xff] +\n      \"-\" +\n      lut[(d2 >> 16) & 0xff] +\n      lut[(d2 >> 24) & 0xff] +\n      // eslint-disable-next-line no-mixed-operators\n      lut[d3 & 0xff] +\n      lut[(d3 >> 8) & 0xff] +\n      lut[(d3 >> 16) & 0xff] +\n      lut[(d3 >> 24) & 0xff]\n    );\n  };\n\n  return self;\n})();\n","import * as d3 from \"d3\";\n\n// CourtHive-common-core\nimport { UUID } from \"./UUID\";\nimport { scoreFx } from \"./scoreFx\";\nimport { matchFormatCode } from \"./matchFormatCode\";\n\n/* To convert tmx 1.0 draw into tmx 2.0 draw nuids need to be added to all\n * nodes and array of opponent ids needs to be added to deepest nodes.\n */\n\nfunction playersHash(players) {\n  return players\n    .map((p) => p && p.id)\n    .filter((f) => f)\n    .sort()\n    .join(\"-\");\n}\n\nexport function drawFx(opts) {\n  var fx = {};\n\n  let numArr = (count) => [...Array(count)].map((_, i) => i);\n  let unique = (arr) => arr.filter((item, i, s) => s.lastIndexOf(item) === +i);\n  let range = (start, end) =>\n    Array.from({ length: end - start }, (v, k) => k + start);\n  let indices = (val, arr) =>\n    arr.reduce((a, e, i) => {\n      if (e === val) a.push(i);\n      return a;\n    }, []);\n  let occurrences = (val, arr) =>\n    arr.reduce((r, val) => {\n      r[val] = 1 + r[val] || 1;\n      return r;\n    }, {})[val] || 0;\n  let intersection = (a, b) =>\n    a\n      .filter((n) => b.indexOf(n) !== -1)\n      .filter((e, i, c) => c.indexOf(e) === i);\n  let randomPop = (array) =>\n    array.length\n      ? array.splice(Math.floor(Math.random() * array.length), 1)[0]\n      : undefined;\n  let subSort = (arr, i, n, sortFx) =>\n    [].concat(\n      ...arr.slice(0, i),\n      ...arr.slice(i, i + n).sort(sortFx),\n      ...arr.slice(i + n, arr.length)\n    );\n\n  var standard_draws = [2, 4, 8, 16, 32, 64, 128, 256, 512];\n  // removed 224 because compressed draws blowing up beyond 128\n  var draw_sizes = [2, 4, 8, 12, 16, 24, 32, 48, 64, 96, 128, 256, 512];\n  var validDrawSize = (players) => draw_sizes.indexOf(players) >= 0;\n\n  var o = {\n    rr_h2h_priority: false,\n    compressed_draw_formats: true,\n    compressed: { byes_adjacent_to_seeds: false },\n    seedBlocks: [[1], [2], [3, 4], [5, 8], [9, 16], [17, 32], [33, 64]],\n    seed_limits: [\n      [0, 0],\n      [4, 2],\n      [11, 4],\n      [21, 8],\n      [41, 16],\n      [97, 32],\n      [193, 64],\n    ],\n    bye_placement: {\n      8: [2, 7, 5],\n      16: [2, 15, 11, 6, 7, 10, 14],\n      32: [2, 31, 23, 10, 15, 18, 26, 7, 6, 27, 19, 14, 11, 22, 30],\n      64: [\n        2,\n        63,\n        47,\n        18,\n        31,\n        34,\n        50,\n        15,\n        10,\n        55,\n        39,\n        26,\n        23,\n        42,\n        58,\n        7,\n        5,\n        60,\n        44,\n        21,\n        28,\n        37,\n        53,\n        12,\n        13,\n        52,\n        36,\n        29,\n        20,\n        45,\n        61,\n      ],\n      128: [\n        2,\n        127,\n        31,\n        34,\n        63,\n        66,\n        95,\n        98,\n        15,\n        18,\n        47,\n        50,\n        79,\n        82,\n        111,\n        114,\n        7,\n        10,\n        23,\n        26,\n        39,\n        42,\n        55,\n        58,\n        71,\n        74,\n        87,\n        90,\n        103,\n        106,\n        119,\n        122,\n      ],\n      256: [\n        2,\n        255,\n        63,\n        66,\n        127,\n        130,\n        191,\n        194,\n        31,\n        34,\n        95,\n        98,\n        159,\n        162,\n        223,\n        226,\n        15,\n        18,\n        47,\n        50,\n        79,\n        82,\n        111,\n        114,\n        143,\n        146,\n        175,\n        178,\n        207,\n        210,\n        239,\n        242,\n        7,\n        10,\n        23,\n        26,\n        39,\n        42,\n        55,\n        58,\n        71,\n        74,\n        87,\n        90,\n        103,\n        106,\n        119,\n        122,\n        135,\n        138,\n        151,\n        154,\n        167,\n        170,\n        183,\n        186,\n        199,\n        202,\n        215,\n        218,\n        231,\n        234,\n        247,\n        250,\n      ],\n    },\n    seedPositions: {\n      1: [[\"1\", \"0\"]],\n      2: [[\"0\", \"1\"]],\n      3: [\n        [\"1\", \".250\"],\n        [\"0\", \".750\"],\n      ],\n      5: [\n        [\"0\", \".250\"],\n        [\"0\", \".500\"],\n        [\"1\", \".500\"],\n        [\"1\", \".750\"],\n      ],\n      9: [\n        [\"1\", \".125\"],\n        [\"0\", \".375\"],\n        [\"1\", \".625\"],\n        [\"0\", \".875\"],\n        [\"0\", \".125\"],\n        [\"1\", \".375\"],\n        [\"0\", \".625\"],\n        [\"1\", \".875\"],\n      ],\n      13: [],\n      17: [\n        [\"1\", \".0625\"],\n        [\"0\", \".1875\"],\n        [\"1\", \".3125\"],\n        [\"0\", \".4375\"],\n        [\"1\", \".5625\"],\n        [\"0\", \".6875\"],\n        [\"1\", \".8125\"],\n        [\"0\", \".9375\"],\n        [\"0\", \".0625\"],\n        [\"1\", \".1875\"],\n        [\"0\", \".3125\"],\n        [\"1\", \".4375\"],\n        [\"0\", \".5625\"],\n        [\"1\", \".6875\"],\n        [\"0\", \".8125\"],\n        [\"1\", \".9375\"],\n      ],\n      25: [],\n      33: [\n        [\"1\", \".03125\"],\n        [\"0\", \".09375\"],\n        [\"1\", \".15625\"],\n        [\"0\", \".21875\"],\n        [\"1\", \".28125\"],\n        [\"0\", \".34375\"],\n        [\"1\", \".40625\"],\n        [\"0\", \".46875\"],\n        [\"1\", \".53125\"],\n        [\"0\", \".59375\"],\n        [\"1\", \".65625\"],\n        [\"0\", \".71875\"],\n        [\"1\", \".78125\"],\n        [\"0\", \".84375\"],\n        [\"1\", \".90625\"],\n        [\"0\", \".96875\"],\n        [\"0\", \".03125\"],\n        [\"1\", \".09375\"],\n        [\"0\", \".15625\"],\n        [\"1\", \".21875\"],\n        [\"0\", \".28125\"],\n        [\"1\", \".34375\"],\n        [\"0\", \".40625\"],\n        [\"1\", \".46875\"],\n        [\"0\", \".53125\"],\n        [\"1\", \".59375\"],\n        [\"0\", \".65625\"],\n        [\"1\", \".71875\"],\n        [\"0\", \".78125\"],\n        [\"1\", \".84375\"],\n        [\"0\", \".90625\"],\n        [\"1\", \".96875\"],\n      ],\n      49: [],\n    },\n    separation: { team: true },\n  };\n\n  if (opts) keyWalk(opts, o);\n\n  fx.options = (options) => {\n    if (!options) return o;\n    keyWalk(options, o);\n  };\n\n  fx.acceptedDrawSizes = acceptedDrawSizes;\n  function acceptedDrawSizes({ num_players, standardSizes, forceCompressed }) {\n    if (!num_players || num_players < 2) return 0;\n\n    let d = 0;\n    while (draw_sizes[d] < num_players) d += 1;\n\n    let s = 0;\n    while (standard_draws[s] < num_players) s += 1;\n\n    if (standardSizes) return standard_draws[s];\n\n    // otherwise check the settings for desired draw structure\n    // added 128 limit because compressed draws > 128 blowing up\n    return (forceCompressed || o.compressed_draw_formats) && num_players <= 128\n      ? draw_sizes[d]\n      : standard_draws[s];\n  }\n\n  fx.standardDrawSize = standardDrawSize;\n  function standardDrawSize(num_players) {\n    let i = 0;\n    while (standard_draws[i] < num_players) i += 1;\n    return standard_draws[i];\n  }\n\n  fx.treeDrawMatchOrder = treeDrawMatchOrder;\n  function treeDrawMatchOrder(draw) {\n    let mtz = matches(draw);\n    return mtz\n      .filter((m) => m.match)\n      .sort((a, b) => drawPosition(a) - drawPosition(b))\n      .map((m) => m.match.muid);\n    function drawPosition(match) {\n      if (!match.teams || !Array.isArray(match.teams) || !match.teams.length)\n        return 1000;\n      let draw_position = match.teams.reduce(\n        (p, c) => (c && c[0] && c[0].draw_position) || p,\n        undefined\n      );\n      return draw_position || 1000;\n    }\n  }\n\n  fx.bracketMatches = bracketMatches;\n  function bracketMatches(draw, bracket_index) {\n    if (!draw || !draw.brackets) return [];\n    let bracket = draw.brackets[bracket_index];\n\n    let teamsHash = (teams) => {\n      return teams\n        .map((team) =>\n          team\n            .map((p) => p.id)\n            .sort()\n            .join(\"-\")\n        )\n        .sort()\n        .join(\"-\");\n    };\n    let uniqueTeam = (arr, m) => {\n      if (arr.map(teamsHash).indexOf(teamsHash(m)) < 0) arr.push(m);\n      return arr;\n    };\n\n    pruneDefunctMatches();\n    findMissingMatches();\n\n    return bracket.matches;\n\n    function pruneDefunctMatches() {\n      // to support legacy brackets\n      if (!bracket.teams) {\n        bracket.teams = bracket.players.map((p) => [p]);\n      }\n\n      // get an array of all match_ups:\n      let match_ups = [].concat(\n        ...bracket.teams\n          .map((team) => teamMatchups(team))\n          .map((matchup) => matchup.map((teams) => teams.map(playersHash)))\n      );\n\n      let existing_match_ups = bracket.matches.map((match) =>\n        match.teams ? match.teams.map(playersHash) : []\n      );\n      let defunct = existing_match_ups.filter(\n        (emu) =>\n          !match_ups.reduce(\n            (p, c) => (emu && c && intersection(emu, c).length === 2) || p,\n            false\n          )\n      );\n\n      bracket.matches = bracket.matches.filter((match) => {\n        let pairing = match.teams ? match.teams.map(playersHash) : [];\n        let obsolete = defunct.reduce(\n          (p, c) => intersection(pairing, c).length === 2 || p,\n          false\n        );\n        return !obsolete;\n      });\n    }\n\n    function findMissingMatches() {\n      []\n        .concat(...bracket.teams.map(teamMissingMatches))\n        .reduce(uniqueTeam, [])\n        .forEach(addTeamMatch);\n    }\n\n    function addTeamMatch(teams) {\n      let players = [].concat(...teams);\n      let match = {\n        teams,\n        players,\n        round_name: \"RR\",\n        bracket: bracket_index,\n        ids: players.map((p) => p.id || p.id),\n      };\n      bracket.matches.push(match);\n    }\n\n    function teamMissingMatches(team) {\n      let team_matchups = teamMatchups(team);\n      let matches_hash = bracket.matches\n        .filter((m) => m.teams)\n        .map((m) => teamsHash(m.teams));\n      let missing = team_matchups.filter((tm) => {\n        let index = matches_hash.indexOf(teamsHash(tm));\n        return index < 0;\n      });\n      return missing;\n    }\n\n    function teamMatchups(team) {\n      let opponents = bracket.teams.filter(\n        (t) => playersHash(t) !== playersHash(team)\n      );\n      let matchups = opponents.map((o) => [team, o]);\n      return matchups;\n    }\n  }\n\n  fx.roundRobinRounds = roundRobinRounds;\n  function roundRobinRounds({ event }) {\n    let draw = event && event.draw;\n    if (!draw || !draw.brackets || !draw.brackets.length) return;\n\n    let rounds = [];\n    let rrbr = draw.brackets.map(bracketRounds);\n    let qualifying = event && event.links && event.links.E;\n\n    let max_rounds = Math.max(...rrbr.map((r) => r.length));\n    for (let r = 0; r < max_rounds; r++) {\n      rounds.push(\n        rrbr\n          .map((br, b) => ({\n            bracket: b,\n            matchups: bracketMatchups(b, br[r], r),\n          }))\n          .filter((f) => f.matchups)\n      );\n    }\n    rounds.forEach((round, i) => {\n      round.forEach((bracket) => {\n        bracket.matchups.forEach((matchup) => {\n          matchup.round = i + 1;\n          matchup.round_name = `RR${qualifying ? \"Q\" : \"\"}${i + 1}`;\n        });\n      });\n    });\n\n    return rounds;\n\n    function bracketMatchups(bracket_index, matchups /*, round*/) {\n      if (!matchups) return;\n      let matches = draw.brackets[bracket_index].matches;\n      let matchhashes = matchups.map((m) => m.sort().join(\"|\"));\n      let result = matches.filter(\n        (m) =>\n          matchhashes.indexOf(\n            m.players\n              .map((p) => p.draw_position)\n              .sort()\n              .join(\"|\")\n          ) >= 0\n      );\n      return result;\n    }\n  }\n\n  fx.bracketRounds = bracketRounds;\n  function bracketRounds(bracket) {\n    if (!bracket || !bracket.matches || !bracket.matches.length) return [];\n    return calcBracketRounds(bracket);\n  }\n\n  // calculate rounds for a given number of round robin opponents\n  function calcBracketRounds(bracket) {\n    let opponents = bracket.players.length;\n    let numArr = (count) => [...Array(count)].map((_, i) => i);\n    let positions = numArr(2 * Math.round(opponents / 2) + 1).slice(1);\n    let rounds = numArr(positions.length - 1).map(() => []);\n    let a_row = positions.slice(0, positions.length / 2);\n    let b_row = positions.slice(positions.length / 2);\n    positions.slice(1).forEach((p, i) => {\n      a_row.forEach((a, j) => {\n        rounds[i].push([a_row[j], b_row[j]]);\n      });\n      let a_head = a_row.shift();\n      let a_down = a_row.pop();\n      let b_up = b_row.shift();\n      a_row = [].concat(a_head, b_up, ...a_row);\n      b_row = [].concat(...b_row, a_down);\n    });\n    return rounds.reverse();\n  }\n\n  function bracketDrawPositions(draw) {\n    return [].concat(\n      ...draw.brackets.map((b, i) =>\n        d3\n          .range(draw.bracket_size)\n          .map((p, j) => ({ bracket: i, position: j + 1 }))\n      )\n    );\n  }\n\n  function rrInfo(draw) {\n    if (!draw.brackets) draw.brackets = [];\n    let draw_positions = bracketDrawPositions(draw);\n    let byes = draw.brackets.length * draw.bracket_size - draw.opponents.length;\n    let matches = [].concat(...draw.brackets.map((b) => b.matches));\n\n    let total = (a, b) => a + b;\n    let total_matches = draw.brackets\n      .map((b) => range(0, b.players.length).reduce(total, 0))\n      .reduce(total, 0);\n\n    let seed_placements = []\n      .concat(...draw.seed_placements.map((s) => s.placements))\n      .map((p) => p.position);\n    let unfinished_seed_placements = draw.seed_placements.filter(\n      (s) => s.range.length !== s.placements.length\n    );\n\n    let unseeded_placements = draw.unseeded_placements\n      ? draw.unseeded_placements.map((u) => u.position)\n      : [];\n    let placements = [].concat(\n      seed_placements,\n      draw.bye_placements || [],\n      unseeded_placements\n    );\n    let hashFx = (h) => [h.bracket, h.position].join(\"|\");\n    let p_hash = placements.map(hashFx);\n    let unfilled_positions = draw_positions.filter(\n      (p) => p_hash.indexOf(hashFx(p)) < 0\n    );\n    let completed_brackets = draw.brackets.map(bracketComplete);\n    let complete =\n      completed_brackets && completed_brackets.reduce((a, b) => a && b);\n    let positions_filled =\n      unseeded_placements &&\n      unseeded_placements.length &&\n      draw.unseeded_placements.length === draw.unseeded_teams.length;\n\n    let unplaced_seeds = [];\n    let open_seed_positions = [];\n    if (unfinished_seed_placements.length) {\n      let placed_seeds = unfinished_seed_placements[0].placements.map(\n        (p) => p.seed\n      );\n      unplaced_seeds = unfinished_seed_placements[0].range\n        .filter((s) => placed_seeds.indexOf(s) < 0)\n        .map((r) => draw.seeded_teams[r]);\n      let p_hash = unfinished_seed_placements[0].placements.map((p) =>\n        hashFx(p.position)\n      );\n      open_seed_positions = unfinished_seed_placements[0].positions.filter(\n        (p) => p_hash.indexOf(hashFx(p)) < 0\n      );\n    }\n\n    return {\n      draw_type: \"roundrobin\",\n      draw_positions,\n      matches,\n      positions_filled,\n      complete,\n      byes,\n      placements,\n      unfilled_positions,\n      total_matches,\n      unfinished_seed_placements,\n      unplaced_seeds,\n      open_seed_positions,\n    };\n  }\n\n  fx.compassInfo = compassInfo;\n  function compassInfo(draw) {\n    var complete,\n      total_matches = 0,\n      all_matches = [],\n      match_nodes = [],\n      upcoming_match_nodes = [],\n      unassigned = [];\n    let directions = [\n      \"east\",\n      \"west\",\n      \"north\",\n      \"south\",\n      \"northeast\",\n      \"northwest\",\n      \"southeast\",\n      \"southwest\",\n    ];\n    directions\n      .filter((d) => draw[d])\n      .forEach((direction) => {\n        let info = treeInfo(draw[direction]);\n        complete = complete || info.complete;\n        total_matches += info.total_matches;\n        all_matches = all_matches.concat(...info.all_matches);\n        match_nodes = match_nodes.concat(...info.match_nodes);\n        upcoming_match_nodes = upcoming_match_nodes.concat(\n          ...info.upcoming_match_nodes\n        );\n        unassigned = unassigned.concat(...info.unassigned);\n      });\n\n    return {\n      complete,\n      total_matches,\n      all_matches,\n      match_nodes,\n      upcoming_match_nodes,\n      unassigned,\n    };\n  }\n\n  fx.collapseHierarchy = collapseHierarchy;\n  function collapseHierarchy(node, depth) {\n    /*\n      if (node.depth <= depth) {\n         node._height = node.height;\n         node.height = node.height = node.height + 1 - depth;\n      }\n      */\n    if (node.depth >= depth) {\n      node._height = node.height;\n      node.height = node.height = 0;\n    }\n    if (node.depth === depth) {\n      node._children = node.children || node._children;\n      node.children = null;\n      return;\n    }\n    if (node.depth < depth) node.children = node.children || node._children;\n    if (!node.children) return;\n    node.children.forEach((c) => collapseHierarchy(c, depth));\n  }\n\n  fx.expandHierarchy = expandHierarchy;\n  function expandHierarchy(node) {\n    node.children = node.children || node._children;\n    node.height = node.height || node._height;\n    node._children = null;\n    node._height = null;\n    if (!node.children) return;\n    node.children.forEach((c) => expandHierarchy(c));\n  }\n\n  function treeInfo(draw, collapse) {\n    if (!draw) return {};\n    let calc_tree = d3.tree();\n    let draw_hierarchy = d3.hierarchy(draw);\n    let maxTreeDepth = draw.maxTreeDepth || collapse;\n    if (maxTreeDepth) collapseHierarchy(draw_hierarchy, maxTreeDepth);\n    let nodes = calc_tree(draw_hierarchy).descendants();\n\n    let depth = Math.max(...nodes.map((n) => n.depth));\n    let byes = nodes.filter((n) => !n.height && n.data.bye);\n    let structural_byes = nodes.filter(\n      (f) => +f.height === 0 && f.depth !== depth\n    );\n\n    let match_nodes = (nodes && nodes.filter((n) => matchNode(n))) || [];\n\n    let bye_nodes = match_nodes.filter((n) => !teamMatch(n, false));\n    let double_bye_nodes = match_nodes.filter((n) => byeNode(n) > 1);\n\n    let all_matches = nodes.filter(\n      (n) =>\n        n &&\n        n.children &&\n        n.children.length === 2 &&\n        (!draw.max_round || n.height <= draw.max_round)\n    );\n    var upcoming_match_nodes = all_matches.filter(\n      (n) => n && n.children && (qualifierChild(n) || !matchNode(n))\n    );\n    let doubles = nodes\n      .map((n) => (n.data.team ? n.data.team.length > 1 : false))\n      .reduce((a, b) => a || b);\n    let draw_positions = unique(nodes.map((n) => n.data.dp)).filter((f) => f);\n    let qualifiers = nodes.filter((n) => !n.height && n.data.qualifier);\n    let seeds = nodes\n      .filter(\n        (n) => !n.height && n.data.team && n.data.team[0] && n.data.team[0].seed\n      )\n      .sort((a, b) => a.data.team[0].seed - b.data.team[0].seed);\n    let final_round = draw.max_round\n      ? nodes.filter((f) => +f.height === +draw.max_round)\n      : nodes.filter((f) => +f.depth === 0);\n    let final_round_players = match_nodes\n      .filter((m) =>\n        draw.max_round ? +m.height === +draw.max_round : !m.depth\n      )\n      .map((m) => m.data.team);\n    let unassigned = nodes.filter(\n      (n) =>\n        !maxTreeDepth &&\n        !n.height &&\n        !n.data.team &&\n        !n.data.bye &&\n        !n.data.qualifier\n    );\n\n    let assignments = [].concat(\n      ...nodes\n        .filter(\n          (f) => !f.height && f.data.team && !f.data.qualifier && !f.data.bye\n        )\n        .map((node) => node.data.team.map((p) => ({ [p.id]: node.data.dp })))\n    );\n    let assigned_positions = assignments.length\n      ? Object.assign(...assignments)\n      : {};\n\n    let total_matches = all_matches.length - byes.length;\n    let complete =\n      match_nodes.length &&\n      match_nodes\n        .filter(validMatch)\n        .map((n) => byeChild(n) || (n.data.match && n.data.match.complete))\n        .reduce((p, c) => c && p, true);\n\n    function byeChild(n) {\n      return (\n        n &&\n        n.children &&\n        n.children.map((c) => c.data.bye).reduce((p, c) => c || p, false)\n      );\n    }\n    function qualifierChild(n) {\n      return (\n        n &&\n        n.children &&\n        !byeChild(n) &&\n        n.children.map((c) => c.data.qualifier).reduce((p, c) => c || p, false)\n      );\n    }\n    function validMatch(n) {\n      return !draw.max_round || n.height <= draw.max_round;\n    }\n\n    // function isStructuralBye(child) { return structural_byes.map(s=>s.data.dp).indexOf(child.data.dp) >= 0; }\n    // function upcomingChild(n) { return n.children && n.children.map(c=>ucmatch(c)).filter(f=>f).length === 2; }\n    // function ucmatch(c) { return matchNode(c) || ( isStructuralBye(c) && !c.data.children); }\n\n    return {\n      draw_type: \"tree\",\n      complete,\n      draw_positions,\n      assigned_positions,\n      seeds,\n      doubles,\n      nodes,\n      depth,\n      total_matches,\n      all_matches,\n      match_nodes,\n      upcoming_match_nodes,\n      byes,\n      bye_nodes,\n      double_bye_nodes,\n      structural_byes,\n      qualifiers,\n      final_round,\n      final_round_players,\n      unassigned,\n    };\n  }\n\n  fx.replaceDrawPlayer = replaceDrawPlayer;\n  function replaceDrawPlayer(draw, existing_player, new_player_data) {\n    if (\n      !draw ||\n      !existing_player ||\n      !new_player_data ||\n      typeof new_player_data !== \"object\"\n    )\n      return;\n    // Replace attributes in event.draw.opponents\n    if (draw.opponents)\n      draw.opponents.forEach((opponent_team) => {\n        opponent_team.forEach(checkReplacePlayer);\n      });\n    // Replace attributes in event.draw.seeded_teams\n    if (draw.seeded_teams)\n      Object.keys(draw.seeded_teams).forEach((key) =>\n        draw.seeded_teams[key].forEach(checkReplacePlayer)\n      );\n    // Replace attributes in event.draw.unseeded_teams\n    if (draw.unseeded_teams)\n      draw.unseeded_teams.forEach((opponent_team) => {\n        opponent_team.forEach(checkReplacePlayer);\n      });\n    // Replace attributes in event.draw.unseeded_placements\n    if (draw.unseeded_placements)\n      draw.unseeded_placements.forEach((placement) => {\n        if (placement.id === existing_player.id)\n          placement.id = new_player_data.id;\n      });\n    // Replace players in all draw matches\n    let matches = [];\n    if (draw.dual_matches) {\n      Object.keys(draw.dual_matches || {}).forEach((key) => {\n        let dual_matches = draw.dual_matches[key].matches || [];\n        dual_matches.forEach((dm) => (dm.dual_match = key));\n        matches = matches.concat(...dual_matches);\n      });\n    } else {\n      matches = fx.matches(draw).filter((m) => m.match && m.match.muid);\n    }\n    matches.forEach((match) => {\n      if (match.teams)\n        match.teams\n          .filter((f) => f)\n          .forEach((team) => team.forEach(checkReplacePlayer));\n      if (match.winner) match.winner.forEach(checkReplacePlayer);\n      if (match.loser) match.loser.forEach(checkReplacePlayer);\n      if (match.players) match.players.forEach(checkReplacePlayer);\n      if (match.ids) match.ids = match.players.map((p) => p.id);\n      if (match.match) {\n        if (match.match.teams)\n          match.match.teams.forEach((team) => team.forEach(checkReplacePlayer));\n        if (match.match.winner && Array.isArray(match.match.winner))\n          match.match.winner.forEach(checkReplacePlayer);\n        if (match.match.loser && Array.isArray * match.match.loser)\n          match.match.loser.forEach(checkReplacePlayer);\n        if (match.match.players)\n          match.match.players.forEach(checkReplacePlayer);\n        if (match.match.ids)\n          match.match.ids = match.match.players.map((p) => p.id);\n      }\n    });\n    if (draw.brackets) {\n      draw.brackets.forEach((bracket) =>\n        bracket.players.forEach(checkReplacePlayer)\n      );\n    }\n\n    function checkReplacePlayer(player) {\n      if (\n        player &&\n        (player.id === existing_player.id || player.id === existing_player.id)\n      ) {\n        Object.keys(new_player_data).forEach(\n          (key) => (player[key] = new_player_data[key])\n        );\n      }\n    }\n  }\n\n  fx.bracketComplete = bracketComplete;\n  function bracketComplete(bracket) {\n    return (\n      bracket.matches &&\n      bracket.matches.length &&\n      bracket.matches.filter((m) => m.winner).length === bracket.matches.length\n    );\n  }\n\n  fx.drawRounds = drawRounds;\n  function drawRounds(num_players) {\n    if (!num_players) return;\n    // get the binary representation of the number of players\n    let bin = d2b(num_players);\n    // result is length of binary string - 1 + 1 if there are any 1s after first digit\n    return bin.slice(1).length + (bin.slice(1).indexOf(1) >= 0 ? 1 : 0);\n    function d2b(dec) {\n      return (dec >>> 0).toString(2);\n    }\n  }\n\n  fx.calcFeedBase = ({ draw_positions }) => {\n    let positions = draw_positions && draw_positions.length;\n    if (!p2(positions)) {\n      positions += sByes(positions);\n    }\n    if (positions && p2(positions)) return positions / 2;\n  };\n\n  fx.feedDrawSize = feedDrawSize;\n  function feedDrawSize({ num_players, skip_rounds, feed_rounds }) {\n    let s = 0;\n    let burn = 0;\n    while (\n      calcFeedSize({\n        first_round_size: standard_draws[s],\n        skip_rounds,\n        feed_rounds,\n      }) < num_players &&\n      burn < 10\n    ) {\n      burn += 1;\n      s += 1;\n    }\n    if (burn >= 10) {\n      console.log(\"BOOM!\", num_players, skip_rounds, feed_rounds);\n      return standard_draws[1];\n    }\n    return standard_draws[s];\n  }\n\n  fx.calcFeedSize = calcFeedSize;\n  function calcFeedSize({ first_round_size, skip_rounds, feed_rounds }) {\n    if (!first_round_size) return 0;\n    let feed_capacity = first_round_size * 2 - 1;\n    let skip_reduce =\n      skip_rounds && skip_rounds > 0 ? first_round_size / (skip_rounds * 2) : 0;\n    let draw_rounds = drawRounds(first_round_size);\n    let possible_feed_rounds = draw_rounds - (skip_rounds || 0);\n    let feed_diff =\n      feed_rounds !== undefined ? possible_feed_rounds - feed_rounds : 0;\n    let feed_reduce =\n      feed_rounds !== undefined && feed_diff > 0\n        ? numArr(feed_diff)\n            .map((d) => Math.pow(2, d))\n            .reduce((a, b) => (a || 0) + (b || 0))\n        : 0;\n    return feed_capacity - skip_reduce - feed_reduce;\n  }\n\n  fx.drawInfo = drawInfo;\n  function drawInfo(draw, collapse) {\n    if (!draw) return;\n    if (draw.brackets) return rrInfo(draw);\n    if (draw.compass) {\n      let info = treeInfo(draw[draw.compass]);\n      if (info) info.compass = true;\n      return info;\n    }\n    if (draw.children) return treeInfo(draw, collapse);\n  }\n\n  fx.blankDraw = blankDraw;\n  function blankDraw(players, offset = 0) {\n    if (isNaN(players) || !validDrawSize(players)) return undefined;\n\n    // function dp(x) { return { dp: offset + x }; }\n    let dp = (x) => ({ dp: offset + x });\n    let positions = Array.from(new Array(players), (val, index) => index + 1);\n\n    return positions.map(dp);\n  }\n\n  fx.addByes = addByes;\n  function addByes(draw) {\n    let info = drawInfo(draw);\n    let draw_positions = info.draw_positions;\n    let max_draw_position = draw_positions.length\n      ? Math.max(...draw_positions)\n      : 0;\n    // let missing_draw_positions = max_draw_position ? Array.from(new Array(max_draw_position),(val,index)=>index+1).filter(p=>draw_positions.indexOf(p) < 0) : [];\n    /*\n      let chooseDrawPosition = (dp) => {\n         let np = missing_draw_positions.filter(p => Math.abs(dp - p) === 1)[0];\n         return np || '';\n      };\n      */\n\n    walkNode(draw);\n\n    function walkNode(node, descent = 0) {\n      if (descent < info.depth && !node.children) {\n        let position =\n          node.team && node.team[0].draw_position >= max_draw_position / 2\n            ? 0\n            : 1;\n        addBye(node, position);\n      }\n      if (node.children)\n        node.children.forEach((child) => walkNode(child, descent + 1));\n    }\n\n    function addBye(node, position = 1) {\n      let team = node.team;\n      let bye = { bye: true, team: [{ draw_position: \"\", bye: true }] };\n      let player = { dp: node.dp, id: node.id, team };\n      node.children = position ? [player, bye] : [bye, player];\n      node.match = { score: \"\" };\n    }\n  }\n\n  // return positions of structural byes\n  fx.structuralByes = structuralByes;\n  function structuralByes(players, bit_flip) {\n    let s = sByes(players);\n    let cluster_size = players / s;\n    let clusters = players / cluster_size;\n    let cluster = 1;\n    let bye_positions = [];\n    while (cluster <= clusters) {\n      let odd = cluster % 2;\n      if (bit_flip && cluster > 1 && cluster < clusters) odd = 1 - odd;\n      if (odd) {\n        bye_positions.push((cluster - 1) * cluster_size + 1);\n      } else {\n        bye_positions.push(cluster * cluster_size);\n      }\n      cluster += 1;\n    }\n    return bye_positions;\n  }\n\n  // number of structural byes\n  fx.sByes = sByes;\n  function sByes(players) {\n    if (p2(players)) return 0;\n    let b = 1;\n    while (b < players && !p2(players - b)) {\n      b += 1;\n    }\n    return b;\n  }\n\n  // check for power of 2\n  function p2(n) {\n    if (isNaN(n)) return false;\n    return n && (n & (n - 1)) === 0;\n  }\n\n  // WHAT WAS THIS?\n  fx.dispersion = dispersion;\n  function dispersion(num_players, depth) {\n    let values = [];\n    let p = num_players;\n    while (div2(p)) {\n      values.push(p);\n      p = p / 2;\n    }\n\n    let d = 0;\n    let positions = [];\n    values.forEach((value) => {\n      if (+d === +depth) {\n        positions.push(value);\n        positions.push(num_players - value + 1);\n      }\n      d += 1;\n    });\n    positions.sort((a, b) => a - b);\n    return positions;\n\n    function div2(n) {\n      if (isNaN(n)) return false;\n      return n / 2 === Math.floor(n / 2);\n    }\n  }\n\n  function buildRound({ e, tree, byes = [], fed, rounds }) {\n    let round = [];\n    let pos = 0;\n    while (pos < tree.length) {\n      if (byes.indexOf(pos + 1) >= 0) {\n        let node = tree[pos];\n        round.push(node);\n        pos += 1;\n      } else {\n        let child1 = tree[pos];\n        child1.fed = fed;\n        child1.round = rounds;\n        let child2 = tree[pos + 1];\n        if (child2) {\n          child2.fed = fed;\n          child2.round = rounds;\n        }\n\n        let node = { children: [child1, child2], nuid: UUID.new() };\n        round.push(node);\n        pos += 2;\n      }\n    }\n    return round;\n  }\n\n  fx.feedRound = feedRound;\n  function feedRound(draw, remaining, fed, rounds) {\n    let round = [];\n    let pos = 0;\n    while (pos < draw.length) {\n      let feed_arm = remaining.pop();\n      feed_arm.feed = true;\n      feed_arm.fed = fed + 1;\n      feed_arm.round = rounds;\n\n      let position = draw[pos];\n      position.round = rounds;\n      position.fed = fed + 1;\n\n      let match = { children: [position, feed_arm] };\n      round.push(match);\n      pos += 1;\n    }\n    return { round, remaining };\n  }\n\n  // TODO: Total Mess unless treeDraw() is configured properly\n  // which means (for now) options({ draw: { feed_in: true }});\n  /*\n   fx.doubleElimination = doubleElimination;\n   function doubleElimination(e, teams) {\n      let total_positions = Array.isArray(teams) ? teams.length : teams;\n      let main = buildDraw({ e, teams: total_positions });\n      let feed = feedInDraw({ e, teams: acceptedDrawSizes({ num_players: total_positions / 2 }), offset: total_positions });\n      let children = [main, feed];\n      return { children };\n   }\n   */\n\n  fx.feedInDraw = feedInDraw;\n  function feedInDraw({\n    e,\n    teams,\n    skip_rounds = 0,\n    /*sequentials=0, */ feed_rounds = 0,\n    offset,\n  }) {\n    let team_count = Array.isArray(teams) ? teams.length : teams;\n    if (team_count < 2) return;\n    let total_rounds = drawRounds(teams);\n    if (skip_rounds >= total_rounds) feed_rounds = 0;\n\n    let up2 = (x) => Math.pow(2, Math.ceil(Math.log(x) / Math.log(2)));\n    let players = up2(team_count + 1);\n    let positions = blankDraw(players, offset);\n\n    let remaining = positions.slice(positions.length / 2).reverse();\n    let round = buildRound({\n      e,\n      tree: positions.slice(0, positions.length / 2),\n    });\n\n    let rounds = 0;\n    while (round.length > 1 && skip_rounds > 0) {\n      round = buildRound({ e, tree: round });\n      skip_rounds -= 1;\n      rounds += 1;\n    }\n\n    // if (sequentials && sequentials > 1) feed_rounds = sequentials;\n\n    let fed = 0;\n    // let sequenced = 0;\n    if (round.length > 1 && fed < feed_rounds) {\n      ({ round, remaining } = feedRound(round, remaining, fed, rounds));\n      fed += 1;\n      // sequenced += 1;\n    }\n\n    /*\n      while(round.length > 1 && sequentials < sequenced) {\n         ({round, remaining} = feedRound(round, remaining, fed, rounds));\n         fed += 1;\n         sequenced += 1;\n      }\n      */\n\n    while (round.length > 1) {\n      round = buildRound({ e, tree: round, fed, rounds });\n      rounds += 1;\n      if (round.length > 1 && fed < feed_rounds) {\n        if (fed >= skip_rounds)\n          ({ round, remaining } = feedRound(round, remaining, fed, rounds));\n        fed += 1;\n      }\n    }\n\n    if (fed < feed_rounds) {\n      ({ round, remaining } = feedRound(round, remaining, fed, rounds));\n    }\n\n    return round && round.length ? round[0] : round;\n  }\n\n  fx.buildDraw = buildDraw;\n  function buildDraw({ e, teams, structural_byes, offset = 0, direction }) {\n    let round;\n    if (Array.isArray(teams)) {\n      round = teams.map((t, i) => ({ dp: offset + i + 1, team: t }));\n    } else {\n      if (isNaN(teams) || !validDrawSize(teams)) return undefined;\n      round = blankDraw(teams, offset);\n    }\n\n    structural_byes = structural_byes || structuralByes(round.length);\n\n    round = buildRound({ e, tree: round, byes: structural_byes });\n    while (round.length > 1) {\n      round = buildRound({ e, tree: round });\n    }\n    if (direction) round[0].direction = direction;\n    return round[0];\n  }\n\n  fx.buildQualDraw = buildQualDraw;\n  function buildQualDraw({ e, num_players, num_qualifiers }) {\n    let group_size = Math.ceil(num_players / num_qualifiers);\n    let section_size = standardDrawSize(group_size);\n    let sections = Array.from(new Array(num_qualifiers), (val, i) => i);\n    let children = sections.map((u, i) =>\n      buildDraw({ e, teams: section_size, offset: i * section_size })\n    );\n    let max_round = d3.hierarchy(children[0]).height;\n    return { children, max_round };\n  }\n\n  fx.assignPosition = assignPosition;\n  function assignPosition({\n    node,\n    position,\n    team = [{}],\n    bye,\n    qualifier,\n    propagate,\n    assigned,\n  }) {\n    if (!node || !position) return assigned;\n    if (+node.dp === +position) {\n      node.team = team;\n      node.team.forEach((player) => {\n        player.draw_position = position;\n        player.bye = bye;\n        player.qualifier = qualifier;\n        player.entry = player.entry ? player.entry : qualifier ? \"Q\" : \"\";\n      });\n      node.bye = bye;\n      node.qualifier = qualifier;\n      assigned = true;\n\n      if (!propagate) return assigned;\n    }\n    if (node.children) {\n      let result = node.children.map((child) =>\n        assignPosition({\n          node: child,\n          position,\n          team,\n          bye,\n          qualifier,\n          propagate,\n          assigned,\n        })\n      );\n      return result.reduce((a, b) => a || b);\n    }\n    return assigned;\n  }\n\n  fx.findPositionNode = findPositionNode;\n  function findPositionNode({ node, position }) {\n    if (+node.dp === +position) return node;\n    if (!node.children) return;\n\n    // if position in node children, get index;\n    let cdpi = node.children.map((c) => c.dp).indexOf(position);\n\n    if (cdpi >= 0) {\n      return node;\n    } else {\n      return []\n        .concat(\n          ...node.children.map((child) =>\n            findPositionNode({ node: child, position })\n          )\n        )\n        .filter((f) => f)[0];\n    }\n  }\n\n  fx.advancePosition = advancePosition;\n  function advancePosition({\n    draw,\n    position,\n    score,\n    set_scores,\n    matchFormat,\n    bye,\n    onlyIfBye,\n    winner,\n  }) {\n    let position_node = findPositionNode({ node: draw, position });\n\n    // don't advance if position_node already contains player\n    if (!position_node || position_node.dp) return;\n\n    return advanceToNode({\n      draw,\n      node: position_node,\n      position,\n      score,\n      set_scores,\n      matchFormat,\n      bye,\n      onlyIfBye,\n      winner,\n    });\n  }\n\n  fx.teamIsBye = (team) => team.map((p) => p.bye).reduce((a, b) => a && b);\n\n  function matchDrawPositions(match) {\n    return (\n      (match.players &&\n        match.players.reduce(\n          (p, c) =>\n            c && p.indexOf(c.draw_position) < 0 ? p.concat(c.draw_position) : p,\n          []\n        )) ||\n      []\n    );\n  }\n\n  fx.advanceToNode = advanceToNode;\n  function advanceToNode({\n    draw,\n    node,\n    position,\n    score,\n    set_scores,\n    complete,\n    matchFormat,\n    bye,\n    onlyIfBye,\n    winner,\n  }) {\n    // cannot advance if no position node\n    if (!node) return { advanced: false };\n    if (!node.match) node.match = {};\n\n    let current_match = node.match;\n    let round = current_match && current_match.round;\n    if (node.dp && round) {\n      let draw_matches = Array.isArray(draw.matches) && draw.matches;\n      let matches = draw_matches || fx.matches(draw) || [];\n      let match_draw_positions = matchDrawPositions(current_match);\n\n      let next_round_match = matches\n        .filter(\n          (m) =>\n            (m.round && m.round === round + 1) ||\n            (m.match && m.match.round && m.match.round === round + 1)\n        )\n        .reduce(\n          (p, m) =>\n            m.match &&\n            intersection(matchDrawPositions(m.match), match_draw_positions)\n              .length\n              ? m\n              : p,\n          undefined\n        );\n\n      let next_round_score =\n        next_round_match &&\n        next_round_match.match &&\n        next_round_match.match.score;\n      let next_round_draw_positions =\n        next_round_match && matchDrawPositions(next_round_match.match);\n\n      // if there is an existing position assigned to node AND if there is a subsequent match winner\n      // THEN: if the attempted assignment is not the same, fail\n      if (\n        next_round_score &&\n        next_round_draw_positions.indexOf(+position) < 0\n      ) {\n        return {\n          advanced: false,\n          error: \"Cannot change match outcome with subsequent match(es)\",\n        };\n      }\n      if (next_round_score && !complete) {\n        return {\n          advanced: false,\n          error:\n            \"Cannot enter an incomplete match score with subsequent matche(es)\",\n        };\n      }\n    }\n\n    // if position in node children, get index;\n    let cdpi = node.children.map((c) => c.dp).indexOf(position);\n    let teams = node.children.map((c) => c.team).filter((f) => f);\n    let containsByeTeam = teams.reduce((p, c) => fx.teamIsBye(c) || p, false);\n\n    if (teams.length === 2 && cdpi >= 0) {\n      if (onlyIfBye && !containsByeTeam) {\n        // condition don't advance the position *unless* there is a ByeTeam\n        return { advanced: false };\n      } else if (!bye && fx.teamIsBye(teams[cdpi])) {\n        return { advanced: false };\n      } else {\n        let opponent_is_bye = fx.teamIsBye(teams[1 - cdpi]);\n        advance(opponent_is_bye, bye);\n        return { advanced: true };\n      }\n    }\n\n    return { advanced: false };\n\n    function advance(opponent_is_bye, bye) {\n      node.children.forEach((child, i) => {\n        if (+child.dp === +position) {\n          node.bye = bye;\n          node.dp = position;\n          // draw position shouldn't really be assigned if not a winner\n          // but this needs to be thoroughly tested before changed...\n          // if (winner) node.dp = position;\n          node.team = child.team;\n          if (!opponent_is_bye) {\n            node.match.score = score;\n            node.match.winner_index = i;\n            node.match.winner = child.team;\n            node.match.set_scores = set_scores;\n            node.match.matchFormat = matchFormat;\n          }\n        } else {\n          if (!opponent_is_bye) node.match.loser = child.team;\n        }\n      });\n    }\n  }\n\n  /*\n   fx.findMatchNodeByPosition = findMatchNodeByPosition;\n   function findMatchNodeByPosition({ node, position }) {\n      let position_node = findPositionNode({ node, position });\n      if (!position_node) return;\n\n      let target_node;\n      if (+position_node.dp === +position) {\n         target_node = position_node;\n      } else {\n         // if position in node children, get index;\n         let cdpi = position_node.children.map(c => c.dp).indexOf(position);\n         target_node = position_node.children[cdpi];\n      }\n      if (!target_node.children) return;\n\n      let teams = target_node.children.map(c => c.team).filter(f=>f);\n      // let teamIsBye = (team) => team.map(p => p.bye).reduce((a, b) => a && b);\n      let byeTeam = teams.map(t => fx.teamIsBye(t)).reduce((a, b) => a && b);\n\n      if (teams.length === 2 && !byeTeam) return target_node;\n   }\n   */\n\n  fx.modifyPositionScore = modifyPositionScore;\n  function modifyPositionScore({\n    node,\n    positions,\n    score,\n    set_scores,\n    complete,\n    matchFormat,\n  }) {\n    let target_node = findMatchNodeByTeamPositions(node, positions);\n\n    if (!target_node) return;\n    if (!target_node.match) target_node.match = {};\n    target_node.match.score = score;\n    target_node.match.set_scores = set_scores;\n    target_node.match.matchFormat = matchFormat;\n    if (complete !== undefined) target_node.match.complete = complete;\n\n    // if match is incomplete remove any outdated attributes\n    if (!complete) {\n      delete target_node.team;\n      delete target_node.match.loser;\n      delete target_node.match.winner;\n      delete target_node.match.winner_index;\n    }\n  }\n\n  fx.schedulePosition = schedulePosition;\n  function schedulePosition({ node, position, schedule, venue }) {\n    let target_node = findPositionNode({ node, position });\n    if (!target_node.match) target_node.match = {};\n    target_node.match.schedule = schedule;\n    target_node.match.venue = venue;\n  }\n\n  fx.seedBlock = (seed) => {\n    let seed_block = o.seedBlocks.reduce(inSeedBlock, undefined);\n    return seed_block && seed_block.join(\"-\");\n    function inSeedBlock(p, c) {\n      if (c) {\n        let lower = c[0];\n        let higher = c[1] || c[0];\n        return seed >= lower && seed <= higher ? c : p;\n      }\n    }\n  };\n\n  fx.seedLimit = seedLimit;\n  function seedLimit({ total_players, evt }) {\n    let limit = 0;\n    // let event_seed_limit = evt && evt.seed_limit && (evt.seed_limit < total_players) && evt.seed_limit;\n    let event_seed_limit =\n      evt && evt.seeds && evt.seeds < total_players && evt.seeds;\n    if (event_seed_limit === 0) return 0;\n    o.seed_limits.forEach((threshold) => {\n      if (total_players >= threshold[0]) limit = threshold[1];\n    });\n    return event_seed_limit || limit;\n  }\n\n  fx.roundrobinSeedPlacements = roundrobinSeedPlacements;\n  function roundrobinSeedPlacements({ draw, bracket_size }) {\n    let placements = [];\n    let bracket_count = draw.brackets.length;\n    let seeded_team_keys = Object.keys(draw.seeded_teams);\n    let auto_placed_seeds = seeded_team_keys.slice(0, bracket_count);\n    let random_placed_seeds = seeded_team_keys.slice(bracket_count);\n\n    // Minimum one seed in first position for each bracket\n    d3.range(auto_placed_seeds.length).forEach((s) => {\n      // let bracket = draw.brackets[s % bracket_count];\n      placements.push({\n        range: [s + 1],\n        positions: [{ bracket: s % bracket_count, position: 1 }],\n        placements: [],\n      });\n    });\n\n    // final position of each bracket is available for other seeds to be placed randomly\n    let range = [];\n    let positions = [];\n    d3.range(bracket_count).forEach((s) => {\n      let seed_index = auto_placed_seeds.length + s;\n      // let bracket = draw.brackets[seed_index % bracket_count];\n\n      // the range is restricted by the number of remaining seeds\n      if (s < random_placed_seeds.length) range.push(seed_index + 1);\n      // but the positiosn are available in each bracket\n      positions.push({\n        bracket: seed_index % bracket_count,\n        position: bracket_size,\n      });\n    });\n\n    // randomize the order\n    d3.shuffle(positions);\n    placements.push({ range, positions, placements: [] });\n\n    return placements;\n  }\n\n  fx.qualifyingBracketSeeding = qualifyingBracketSeeding;\n  function qualifyingBracketSeeding({\n    draw,\n    num_players,\n    qualifiers /*, seed_limit*/,\n  }) {\n    let group_size = Math.ceil(num_players / qualifiers);\n    let section_size = standardDrawSize(group_size);\n    // let sections = Array.from(new Array(qualifiers),(val,i)=>i);\n\n    let placements = [];\n    let seeded_team_keys = Object.keys(draw.seeded_teams);\n\n    let auto_placed_seeds = seeded_team_keys.slice(0, qualifiers);\n    let random_placed_seeds = seeded_team_keys.slice(qualifiers);\n\n    // Minimum one seed in first position for each section\n    d3.range(auto_placed_seeds.length).forEach((s) => {\n      let position = (s % qualifiers) * section_size + 1;\n      placements.push({\n        range: [s + 1],\n        placements: [],\n        positions: [position],\n      });\n    });\n\n    let range = [];\n    let positions = [];\n\n    d3.range(random_placed_seeds.length).forEach((s) => {\n      let seed_index = auto_placed_seeds.length + s;\n      range.push(seed_index + 1);\n    });\n\n    // with some qualification draws there are more placement options than seeds to be placed\n    d3.range(auto_placed_seeds.length).forEach((s) => {\n      let position = (s % qualifiers) * section_size + section_size;\n      positions.push(position);\n    });\n\n    d3.shuffle(positions);\n    placements.push({ range, positions, placements: [] });\n\n    return placements;\n  }\n\n  fx.validSeedPlacements = validSeedPlacements;\n  function validSeedPlacements({\n    num_players,\n    random_sort = false,\n    seed_limit,\n    qualifying_draw,\n  }) {\n    let i = 1;\n    let placements = [];\n    let draw_size = acceptedDrawSizes({\n      num_players,\n      standardSizes: qualifying_draw,\n    });\n    seed_limit =\n      seed_limit || seedLimit({ total_players: num_players || draw_size });\n\n    while (i <= seed_limit) {\n      // array of possible placement positions\n      let p = seedPositions(o.seedPositions, i, draw_size);\n\n      // if sort then sort seed groupings\n      // if (random_sort) p = p.sort(() => 0.5 - Math.random());\n      if (random_sort) d3.shuffle(p);\n\n      placements.push({\n        range: playerPositions(i, p.length),\n        positions: p,\n        placements: [],\n      });\n      i += p.length || draw_size;\n    }\n    return placements;\n  }\n\n  // range of player positions\n  function playerPositions(s, n) {\n    return Array.from(new Array(n), (val, i) => i + s);\n  }\n  function seedPositions(seed_positions, i, draw_size) {\n    return seed_positions[i].map((d) => +d[0] + draw_size * d[1]);\n  }\n\n  /*\n      Byes drawn to the top half of the draw shall be positioned on even-numbered lines; byes drawn to the bottom half\n      of the draw shall be positioned on odd-numbered lines.\n\n      If group seeding is used and there are fewer byes available than there are players in the group, then a drawing\n      is used to determine which seeds within the group get the available byes. \n\n      TODO: Byes should have a bye-order attribute for this...\n      The Referee should note the order in which the remaining byes are placed in the draw in the event that this information is\n      needed later for placing an omitted player in the draw\n\n      • First, distribute byes to all the seeds.\n      • Second, distribute byes so that the seeded players who receive byes will be playing other players who have\n        also received byes. If there are not enough byes so that every seeded player is playing another player who has\n        received a bye, then position these byes adjacent to the seeded players starting with the lowest seeded player.\n      • Third, distribute a pair of byes in the fourth quarter of\n        the draw starting from the bottom up; distribute a pair of byes in the first quarter of the draw starting from\n        the top down; distribute a pair of byes in the third quarter of the draw starting from the bottom up; distribute\n        a pair of byes in the second quarter of the draw starting from the top down; and repeat the cycle\n        (fourth quarter, first quarter, third quarter, and second quarter) until all the byes have been distributed.A\n   */\n\n  // distributeByes must occur after seed_positions have been determined\n  // EXCEPT for pre-rounds where all ranked players are seeded...\n  // seed_positions is an array of positions which has been sorted by seed #'s\n  // such that byes are handed out to seeds in order: 1, 2, 3...\n  fx.distributeByes = distributeByes;\n  function distributeByes({ draw, num_players, target_byes }) {\n    let current_draw = draw.compass ? draw[draw.compass] : draw;\n\n    let info = drawInfo(current_draw);\n    let seed_positions = info.seeds.map((m) => m.data.dp);\n    let randomBinary = () => Math.floor(Math.random() * 2);\n\n    num_players =\n      num_players ||\n      (current_draw.opponents ? current_draw.opponents.length : 0) +\n        (current_draw.qualifiers || 0);\n\n    // bye_positions is an array of UNDEFINED with length = # of byes\n    // constructed by slicing from array number of actual teams/players\n    let bye_positions = info.draw_positions\n      .map(() => undefined)\n      .slice(num_players);\n\n    // all draw positions which have a first-round opponent (no structural bye);\n    let paired_positions = info.nodes\n      .filter((f) => +f.height === 1 && f.children)\n      .map((m) => [].concat(...m.children.map((c) => c.data.dp)));\n\n    // first round matches with no seeded position\n    let pairs_no_seed = paired_positions.filter(\n      (f) => intersection(seed_positions, f).length < 1\n    );\n\n    // first round matches with seeded position\n    let pairs_with_seed = paired_positions.filter(\n      (f) => intersection(seed_positions, f).length > 0\n    );\n\n    let draw_size = info.draw_positions.length;\n    let bp = (o.bye_placement && draw_size && o.bye_placement[draw_size]) || {};\n    let prescribed = target_byes || bp;\n\n    if (!info.structural_byes.length) {\n      // if there are not emough prescribed bye_positions then skip priscribed (!!)\n      if (prescribed && prescribed.length >= bye_positions.length) {\n        bye_positions = bye_positions.map((p, i) => prescribed[i]);\n      } else {\n        let seed_placements = current_draw.seed_placements\n          ? []\n              .concat(...current_draw.seed_placements.map((m) => m.placements))\n              .map((m) => m.position)\n          : [];\n\n        // if there are structural byes, then no seed should need bye\n        // if there are not structural byes, distribute byes to seeds first, by seed order\n        // First select pairs that match the seed_positions, which are already in order, with seed groups shuffled\n        // if there are more bye_positions than seed_positions, bye_positions remain undefined\n        let filtered_pairs = bye_positions.map(\n          (b, i) =>\n            pairs_with_seed.filter((p) => p.indexOf(seed_positions[i]) >= 0)[0]\n        );\n\n        bye_positions = []\n          .concat(...filtered_pairs)\n          .filter((f) => seed_placements.indexOf(f) < 0);\n      }\n    } else {\n      // find pairs of positions which are adjacent to structural byes\n      let adjacent_pairs = info.structural_byes\n        .map((sb) => sb.parent.children.filter((c) => c.data.children))\n        .map((m) => m[0].data.children.map((c) => c.dp));\n\n      let structural_seed_order = info.structural_byes.map((s) =>\n        s.data && s.data.team ? s.data.team[0].seed : undefined\n      );\n      let adjacent_to_seeds = [];\n      if (o.compressed.byes_adjacent_to_seeds) {\n        // only used this feature if enabled in drawFx options\n        structural_seed_order\n          .filter((f) => f)\n          .forEach((o, i) => (adjacent_to_seeds[o - 1] = adjacent_pairs[i]));\n      }\n      adjacent_to_seeds.filter((f) => f);\n\n      let assignment = bye_positions.map((b, i) =>\n        adjacent_to_seeds[i] ? adjacent_to_seeds[i][randomBinary()] : undefined\n      );\n\n      // keep track of pairs with no seed or bye\n      let pairs_no_seed_or_bye = pairs_no_seed.filter(\n        (pair) => !intersection(pair, assignment).length\n      );\n      let flat_pairs = [].concat(...pairs_no_seed_or_bye);\n\n      if (target_byes) {\n        // prescribed can't be fixed bye positions because these may create double-bye situations\n        bye_positions = bye_positions.map((p, i) => target_byes[i]);\n      } else {\n        // redefined undefined bye_positions to either be those asigned to adjacent pairs or pairs_no_seed_or_bye\n        bye_positions = assignment\n          .map((b) => {\n            if (b) return b;\n            // if (pairs_no_seed_or_bye.length) return randomPop(pairs_no_seed_or_bye)[Math.floor(Math.random() * 2)];\n            if (pairs_no_seed_or_bye.length)\n              return getBye(pairs_no_seed_or_bye);\n            return false;\n          })\n          .filter((f) => f);\n      }\n\n      // redefine pairs_no_seed to filter out pairs_no_seed_or_bye\n      pairs_no_seed = pairs_no_seed.filter(\n        (pair) => !intersection(pair, flat_pairs)\n      );\n    }\n\n    // if any bye positions are still undefined, randomly distribute to unseeded players\n    // TODO: randomPop need to be replaced with something that chooses quarters/eights\n    // let bye_placements = bye_positions.map(b => b || randomPop(pairs_no_seed)[Math.floor(Math.random() * 2)]);\n    let bye_placements = bye_positions.map((b) => b || getBye(pairs_no_seed));\n\n    bye_placements.forEach((position, i) => {\n      // bye is a boolean which also signifies bye order (order in which byes were assigned)\n      assignPosition({ node: current_draw, position, bye: i + 1 });\n    });\n\n    current_draw.bye_placements = bye_placements;\n    return bye_placements;\n\n    function getBye(source) {\n      let item = randomPop(source);\n      let rand = Math.floor(Math.random() * 2);\n      if (item) return item[rand];\n      console.log({ error: \"unable to pop\", source });\n    }\n  }\n\n  fx.rrByeDistribution = rrByeDistribution;\n  function rrByeDistribution({ draw }) {\n    let byes = draw.brackets.length * draw.bracket_size - draw.opponents.length;\n\n    if (byes > draw.brackets.length) {\n      // console.log('ERROR: There should never be more byes than brackets');\n      // Should only occur when too few players have been added to generate\n      return false;\n    }\n\n    draw.bye_placements = d3.range(byes).map((b, i) => {\n      draw.brackets[i].byes = [{ position: 2 }];\n      return { bracket: i, position: 2 };\n    });\n  }\n\n  function unplacedTeams(draw) {\n    /*\n      let seeds = (draw.seeded_teams && Object.keys(draw.seeded_teams)) || [];\n      let placed_seeds = [].concat(...(draw.seed_placements && draw.seed_placements.map(s=>s.placements.map(p=>p.seed))) || []);\n      let unplaced_seeds = seeds.map(s=>+s).filter(s => placed_seeds.indexOf(s) < 0);\n      let unplaced_seed_teams = draw.seeded_teams && unplaced_seeds.map(s=>draw.seeded_teams[s]);\n      */\n\n    let unseeded_placements = draw.unseeded_placements\n      ? [].concat(\n          ...draw.unseeded_placements.map((p) => p.team.map((m) => m.id))\n        )\n      : [];\n    let unplaced_unseeded = draw.unseeded_teams.filter(\n      (team) => unseeded_placements.indexOf(team[0].id) < 0\n    );\n\n    return unplaced_unseeded;\n  }\n\n  fx.rrUnseededPlacements = rrUnseededPlacements;\n  function rrUnseededPlacements({ draw }) {\n    if (o.separation.team) {\n      randomRRunseededSeparation({ draw });\n    } else {\n      randomRRunseededDistribution({ draw });\n    }\n  }\n\n  // Avoidance / Separation\n  function randomRRunseededSeparation({ draw }) {\n    let exit = false;\n    let unfilled_positions = fx.drawInfo(draw).unfilled_positions;\n    if (!draw.unseeded_placements) draw.unseeded_placements = [];\n\n    /**\n     * for each unfilled_position find the team of all other players in the\n     * bracket, then get array of all unplaced players who don't share the same team,\n     * then random pop from this group to make assignment...\n     * if there are no unplaced players with different team, then random pop from all unplaced players\n     */\n\n    while (unfilled_positions.length && !exit) {\n      let position = randomPop(unfilled_positions);\n\n      let teams = bracketTeams(draw.brackets[position.bracket]);\n      let unplaced_teams = unplacedTeams(draw);\n\n      let team_diff = unplaced_teams.filter(\n        (team) => teams.indexOf(team[0].team) < 0\n      );\n\n      if (o.separation.team && team_diff.length) {\n        let team = randomPop(team_diff);\n        placeTeam(team, position);\n      } else if (unplaced_teams.length) {\n        let team = randomPop(unplaced_teams);\n        placeTeam(team, position);\n      } else {\n        console.log(\"ERROR\");\n        exit = true;\n      }\n    }\n\n    function placeTeam(team, position) {\n      fx.pushBracketTeam({\n        draw,\n        team,\n        bracket_index: position.bracket,\n        position: position.position,\n      });\n      draw.unseeded_placements.push({ team, position });\n    }\n\n    function bracketTeams(bracket) {\n      if (!bracket || !bracket.players) return [];\n      return bracket.players.map((player) => player.team);\n    }\n  }\n\n  function randomRRunseededDistribution({ draw }) {\n    let unfilled_positions = fx.drawInfo(draw).unfilled_positions;\n\n    draw.unseeded_placements = draw.unseeded_teams.map((team) => {\n      let position = randomPop(unfilled_positions);\n\n      fx.pushBracketTeam({\n        draw,\n        team,\n        bracket_index: position.bracket,\n        position: position.position,\n      });\n\n      return { team, position };\n    });\n  }\n\n  fx.distributeQualifiers = distributeQualifiers;\n  function distributeQualifiers({ draw, num_qualifiers }) {\n    let current_draw = draw.compass ? draw[draw.compass] : draw;\n    let info = drawInfo(current_draw);\n    let total = info.draw_positions.length;\n    // let bye_positions = info.byes.map(b=>b.data.dp);\n    let unassigned_positions = info.unassigned.map((u) => u.data.dp);\n    let randomBinary = () => Math.floor(Math.random() * 2);\n    num_qualifiers = num_qualifiers || current_draw.qualifiers || 0;\n\n    // reverse qualifiers so that popping returns in numerical order\n    let qualifiers = d3\n      .range(0, num_qualifiers)\n      .map(() => {\n        return [{ entry: \"Q\", qualifier: true }];\n      })\n      .reverse();\n\n    let section_size = Math.floor(total / num_qualifiers);\n    let sections = d3.range(0, Math.floor(total / section_size));\n\n    // all draw positions which have a first-round opponent (no structural bye);\n    // let paired_positions = info.nodes.filter(f=>+f.height === 1 && f.children).map(m=>[].concat(...m.children.map(c=>c.data.dp)));\n\n    // paired positions which have no byes\n    // TODO: don't place qualifiers with BYEs unless there is no alternative\n    // let pairs_no_byes = paired_positions.filter(f=>intersection(bye_positions, f).length > 0);\n\n    d3.range(0, num_qualifiers).forEach(() => {\n      let section = randomPop(sections);\n      let dprange = d3.range(\n        section * section_size + 1,\n        section * section_size + section_size + 1\n      );\n      let available_positions = intersection(dprange, unassigned_positions);\n      let position = randomBinary()\n        ? available_positions.shift()\n        : available_positions.pop();\n      if (position) {\n        let team = qualifiers.pop();\n        assignPosition({ node: current_draw, position, team, qualifier: true });\n      }\n    });\n\n    qualifiers.forEach((team) => {\n      info = drawInfo(current_draw);\n      let available_positions = info.unassigned.map((u) => u.data.dp);\n      let position = available_positions.pop();\n      assignPosition({ node: current_draw, position, team, qualifier: true });\n    });\n  }\n\n  fx.seededTeams = seededTeams;\n  function seededTeams({ teams }) {\n    // this is an object that acts like an array... because there is no '0' seed\n    return Object.assign(\n      {},\n      ...teams\n        .filter((f) => f[0].seed)\n        .sort((a, b) => a[0].seed - b[0].seed)\n        .map((t) => ({ [t[0].seed]: t }))\n    );\n  }\n\n  fx.placeSeedGroups = placeSeedGroups;\n  function placeSeedGroups({ draw, count }) {\n    let current_draw = draw.compass ? draw[draw.compass] : draw;\n    if (!current_draw.seed_placements || !current_draw.seeded_teams) return;\n\n    // if no count is specified, place all seed groups\n    count = count || current_draw.seed_placements.length;\n    d3.range(0, count).forEach(() => placeSeedGroup({ draw: current_draw }));\n  }\n\n  fx.placeSeedGroup = placeSeedGroup;\n  function placeSeedGroup({ draw, group_index }) {\n    let current_draw = draw.compass ? draw[draw.compass] : draw;\n    if (!current_draw.seed_placements || !current_draw.seeded_teams) return;\n    let seed_group =\n      group_index !== undefined\n        ? current_draw.seed_placements[group_index]\n        : nextSeedGroup({ draw: current_draw });\n\n    if (!seed_group) return;\n\n    // make a copy so original is not diminshed by pop()\n    let positions = seed_group.positions.slice();\n\n    // pre-round draws place byes before remaining seeds... because all ranked players are seedeed\n    if (current_draw.bye_placements)\n      positions = positions.filter(\n        (p) => current_draw.bye_placements.indexOf(p) < 0\n      );\n\n    let missing_seeds = [];\n\n    seed_group.range.forEach((seed) => {\n      // positions should already be randomized\n      let position = positions.pop();\n      let team = current_draw.seeded_teams[seed];\n\n      if (!team) {\n        seed_group.positions = seed_group.positions.filter(\n          (p) => +p !== +position\n        );\n        missing_seeds.push(seed);\n        return;\n      }\n\n      if (current_draw.brackets) {\n        // procesing a round robin\n        fx.pushBracketTeam({\n          draw: current_draw,\n          team,\n          bracket_index: position.bracket,\n          position: position.position,\n        });\n      } else {\n        // processing a tree draw\n        assignPosition({ node: current_draw, position, team });\n      }\n      seed_group.placements.push({ seed, position });\n    });\n\n    if (missing_seeds.length) {\n      missing_seeds.forEach(\n        (s) => (seed_group.range = seed_group.range.filter((r) => r !== s))\n      );\n    }\n  }\n\n  fx.pushBracketTeam = ({ draw, team, bracket_index, position }) => {\n    let player = team[0];\n    player.draw_position = position;\n    draw.brackets[bracket_index].players.push(player);\n\n    team.forEach((opponent) => (opponent.draw_position = position));\n    draw.brackets[bracket_index].teams.push(team);\n  };\n\n  fx.nextSeedGroup = nextSeedGroup;\n  function nextSeedGroup({ draw }) {\n    let current_draw = draw.compass ? draw[draw.compass] : draw;\n    let unplaced = unplacedSeedGroups({ draw: current_draw });\n    return unplaced ? unplaced[0] : undefined;\n  }\n\n  fx.unplacedSeedGroups = unplacedSeedGroups;\n  function unplacedSeedGroups({ draw }) {\n    let current_draw = draw.compass ? draw[draw.compass] : draw;\n    if (\n      !current_draw.seed_placements ||\n      !Array.isArray(current_draw.seed_placements)\n    )\n      return;\n    return current_draw.seed_placements.filter(\n      (sp) => sp.range.length !== sp.placements.length\n    );\n  }\n\n  fx.roundMatches = ({ info, round }) => {\n    let all_matches = info && info.all_matches;\n    let round_matches =\n      (round !== undefined &&\n        all_matches &&\n        all_matches.filter((n) => n.height === round && !byeNode(n)).length) ||\n      0;\n    return round_matches;\n  };\n\n  fx.placeUnseededTeams = placeUnseededTeams;\n  function placeUnseededTeams({ draw }) {\n    let current_draw = draw.compass ? draw[draw.compass] : draw;\n    if (!current_draw.unseeded_teams) return;\n    if (o.separation.team && draw.opponents) {\n      randomUnseededSeparation({ draw: current_draw });\n    } else {\n      randomUnseededDistribution({ draw: current_draw });\n    }\n  }\n\n  function randomUnseededDistribution({ draw }) {\n    let unfilled_positions = drawInfo(draw).unassigned.map((u) => u.data.dp);\n    unfilled_positions.forEach((position) => {\n      let team = randomPop(draw.unseeded_teams);\n      if (team) assignPosition({ node: draw, position, team });\n    });\n  }\n\n  /*\n   After seeds have been placed...\n   For each iteration:\n   * 1) sort all teams by number of unplaced players and select team with most unplaced or randomly choose one of the teams which has the same/greatest number of unplaced members \n   * 2) randomly select a member of selected team\n   3) find the half/quarter/eighth or sixteenth with open positions and the fewest members of the same team\n   4) randomly place the selected member in one of the open positions in the selected fractional \n   Repeat\n   */\n\n  function findCandidate({ draw }) {\n    let info = fx.drawInfo(draw);\n\n    let draw_positions = info.draw_positions.sort(sortNumber);\n    let structural_bye_positions = info.structural_byes.map((b) => b.data.dp);\n    let draw_size = draw_positions.concat(...structural_bye_positions).length;\n    let unassigned_positions = info.unassigned\n      .map((u) => u.data.dp)\n      .sort(sortNumber);\n\n    let remaining = (unassigned_positions && unassigned_positions.length) || 0;\n    if (!remaining) return {};\n\n    let largestGroup = unpairedPositions(unassigned_positions);\n    let { opponent } = findOpponent({ largestGroup });\n    // console.log({opponent, largestGroup});\n\n    let opponent_teams = Object.assign(\n      {},\n      ...[].concat(...draw.opponents).map((o) => ({ [o.id]: o.team }))\n    );\n    let grouping_positions = Object.keys(info.assigned_positions).map(\n      groupingPosition\n    );\n    let opponent_groupings = opponent.map((o) => o.team);\n    let opponent_grouping_positions = grouping_positions\n      .filter((gp) => opponent_groupings.indexOf(gp.name) >= 0)\n      .map((gp) => gp.position);\n\n    let all_positions = range(1, draw_size + 1);\n    let chunk_sizes = range(2, draw_size)\n      .filter((f) => f === nearestPow2(f))\n      .reverse();\n    let chunks = chunk_sizes.map((size) => chunkArray(all_positions, size));\n    let vetted = chunks.map(chunkRow);\n\n    let group_not_present = vetted\n      .map((row) => row.filter((r) => !r.group_present))\n      .filter((f) => f);\n    let no_group_unpaired = group_not_present\n      .map((row) => row.filter((r) => r.unpaired.length).map((m) => m.unpaired))\n      .filter((f) => f && f.length);\n    let no_group_unassigned = group_not_present\n      .map((row) =>\n        row.filter((r) => r.unassigned.length).map((m) => m.unassigned)\n      )\n      .filter((f) => f && f.length);\n\n    let viable_sections =\n      (no_group_unpaired.length && no_group_unpaired[0]) ||\n      (no_group_unassigned.length && no_group_unassigned[0]);\n\n    let position;\n    if (viable_sections) {\n      let section = randomPop(viable_sections);\n      position = randomPop(section);\n    } else {\n      position = randomPop(unassigned_positions);\n    }\n\n    return { opponent, position, remaining };\n\n    function findOpponent({ largestGroup = true } = {}) {\n      let assigned = Object.keys(info.assigned_positions);\n      let unplaced_opponents = draw.opponents.filter(\n        (o) => assigned.indexOf(o[0].id) < 0\n      );\n\n      let groupings = {};\n      unplaced_opponents.forEach((team) => {\n        let grouping = teamGrouping(team);\n        groupings[grouping] = groupings[grouping]\n          ? groupings[grouping].concat([team])\n          : [team];\n      });\n      let max_length = Object.keys(groupings).reduce(\n        (p, c) => (groupings[c].length > p ? groupings[c].length : p),\n        0\n      );\n      let min_length = Object.keys(groupings).reduce(\n        (p, c) => (groupings[c].length < p ? groupings[c].length : p),\n        max_length\n      );\n\n      let groupings_meets_max = Object.keys(groupings).filter(\n        (f) => groupings[f].length === max_length\n      );\n      let groupings_meets_min = Object.keys(groupings).filter(\n        (f) => groupings[f].length === min_length\n      );\n\n      let random_group = largestGroup\n        ? randomPop(groupings_meets_max)\n        : randomPop(groupings_meets_min);\n      let random_opponent = randomPop(groupings[random_group]);\n\n      // console.log({ groupings, max_length, groupings_meets_max, random_group, random_opponent, unplaced_opponents });\n      return { opponent: random_opponent };\n\n      function teamGrouping(team) {\n        return team\n          .map((t) => t.team)\n          .sort()\n          .join(\"|\");\n      }\n    }\n\n    function unpairedPositions(positions) {\n      let true_positions = positions.map(truePosition);\n      return positions.filter((u) => !pairAssigned(u));\n\n      function pairAssigned(u) {\n        let true_position = truePosition(u);\n        let true_pair =\n          true_position % 2 ? true_position + 1 : true_position - 1;\n        return true_positions.indexOf(true_pair) < 0;\n      }\n    }\n\n    function checkChunk(chunk) {\n      let unassigned = unassigned_positions.filter(\n        (u) => chunk.indexOf(truePosition(u)) >= 0\n      );\n      let unpaired = unpairedPositions(unassigned);\n      let group_present = opponent_grouping_positions.reduce(\n        (p, g) => (chunk.indexOf(truePosition(g)) >= 0 ? true : p),\n        false\n      );\n      return { unassigned, unpaired, group_present };\n    }\n\n    function chunkArray(arr, chunksize) {\n      return arr.reduce((all, one, i) => {\n        const ch = Math.floor(i / chunksize);\n        all[ch] = [].concat(all[ch] || [], one);\n        return all;\n      }, []);\n    }\n    function sortNumber(a, b) {\n      return a - b;\n    }\n    function chunkRow(row) {\n      return row.map(checkChunk);\n    }\n    function truePosition(p) {\n      let isEven = (x) => !(x & 1);\n      let position = p + structural_bye_positions.filter((s) => s < p).length;\n      return structural_bye_positions.indexOf(p) >= 0 && isEven(p)\n        ? position + 1\n        : position;\n    }\n    function nearestPow2(val) {\n      return Math.pow(2, Math.round(Math.log(val) / Math.log(2)));\n    }\n    function range(start, end) {\n      return Array.from({ length: end - start }, (v, k) => k + start);\n    }\n    function randomPop(array) {\n      return array.length\n        ? array.splice(Math.floor(Math.random() * array.length), 1)[0]\n        : undefined;\n    }\n    function groupingPosition(opponent_id) {\n      return {\n        name: opponent_teams[opponent_id],\n        position: info.assigned_positions[opponent_id],\n      };\n    }\n  }\n\n  // Avoidance / Separation\n  function randomUnseededSeparation({ draw }) {\n    let { opponent, position, remaining } = findCandidate({ draw });\n\n    for (let count = 0; count < remaining; count++) {\n      if (opponent) assignPosition({ node: draw, position, team: opponent });\n      ({ opponent, position } = findCandidate({ draw }));\n    }\n  }\n\n  fx.matchNodes = matchNodes;\n  function matchNodes(data) {\n    return drawInfo(data).match_nodes;\n  }\n\n  fx.matchNode = matchNode;\n  function matchNode(node) {\n    let teams = matchTeams(node);\n    return teams.length === 2 ? teams : false;\n  }\n\n  fx.matchTeams = matchTeams;\n  function matchTeams(node) {\n    if (!node || !node.data || !node.data.children) return false;\n    node.data.children.forEach((child) => {\n      if (\n        child &&\n        child.team &&\n        child.dp &&\n        child.team[0] &&\n        child.team[0].draw_position !== child.dp\n      ) {\n        child.team.forEach((team) => (team.draw_position = child.dp));\n      }\n    });\n    let teams = node.data.children.map((m) => m.team).filter((f) => f);\n    return teams;\n  }\n\n  fx.feedNode = feedNode;\n  function feedNode(node) {\n    if (!node || !node.data || !node.data.children) return false;\n    let feed_arms = node.data.children.map((m) => m.feed).filter((f) => f);\n    return feed_arms.length === 1 ? true : false;\n  }\n\n  fx.feedNodes = feedNodes;\n  function feedNodes(nodes) {\n    return nodes.filter(feedNode);\n  }\n\n  fx.byeTeams = byeTeams;\n  function byeTeams(node) {\n    if (!node.data.children) return false;\n    let teams = matchNode(node);\n    if (!teams) return false;\n    let test = node.data.children.map((d) => d.bye).filter((f) => f);\n    if (!test.length) return false;\n    return test.reduce((a, b) => a && b) ? teams : false;\n  }\n\n  fx.byeNode = byeNode;\n  function byeNode(node) {\n    if (!node.children) return false;\n    let test = node.data.children.map((d) => d.bye).filter((f) => f);\n    if (test.length) return test.length;\n  }\n\n  fx.teamMatch = teamMatch;\n  function teamMatch(node, includeQualifiers = true) {\n    if (!node.children) return false;\n    let teams = matchNode(node);\n    if (!teams) return false;\n    let test = node.data.children.map(isAteam).filter((f) => f);\n    if (test.length < 2) return false;\n    return test.reduce((a, b) => a && b) ? teams : false;\n\n    function isAteam(d) {\n      if (d.bye) return false;\n      if (d.qualifier && includeQualifiers) return false;\n      return true;\n    }\n  }\n\n  fx.drawPositionsWithBye = drawPositionsWithBye;\n  function drawPositionsWithBye(teams) {\n    return unique(\n      [].concat(\n        ...teams.map((node) =>\n          [].concat(\n            ...node.map((team) =>\n              team.map((player) =>\n                !player.bye ? player.draw_position : undefined\n              )\n            )\n          )\n        )\n      )\n    ).filter((f) => f);\n  }\n\n  fx.replaceEmptiesWithByes = replaceEmptiesWithByes;\n  function replaceEmptiesWithByes({ draw }) {\n    let info = drawInfo(draw);\n    let assigned_positions =\n      (info &&\n        Object.keys(info.assigned_positions).map(\n          (k) => info.assigned_positions[k]\n        )) ||\n      [];\n    let bye_positions = ((info && info.draw_positions) || []).filter(\n      (p) => assigned_positions.indexOf(p) < 0\n    );\n    bye_positions.forEach((position) => {\n      assignPosition({ node: draw, position, bye: true });\n    });\n  }\n\n  fx.advanceTeamsWithByes = advanceTeamsWithByes;\n  function advanceTeamsWithByes({ draw }) {\n    let info = drawInfo(draw);\n    // let winner_positions = (info && info.match_nodes && info.match_nodes.filter(n=>n.data.match && n.data.match.winner).map(n=>n.data.dp)) || [];\n    // let bye_teams = info.nodes.filter(f=>byeTeams(f)).map(m=>matchNode(m));\n    // let team_positions = drawPositionsWithBye(bye_teams).filter(p=>winner_positions.indexOf(p) < 0);\n    // team_positions.forEach(p => advancePosition({ draw, position: p, onlyIfBye: true }));\n\n    let match_nodes = info.match_nodes.filter((n) => !n.data.team);\n    let unadvanced = match_nodes.filter((m) =>\n      m.children.reduce((p, c) => c.data.bye || p, undefined)\n    );\n    let unadvanced_dp = [].concat(\n      ...unadvanced.map((u) => u.children.map((c) => c.data.dp))\n    );\n    let bye_dp = info.byes.map((b) => b.data.dp);\n    let unadvanced_player_dp = unadvanced_dp.filter(\n      (u) => bye_dp.indexOf(u) < 0\n    );\n    unadvanced_player_dp.forEach((p) =>\n      advancePosition({ draw, position: p, onlyIfBye: true })\n    );\n\n    if (info.bye_nodes)\n      info.bye_nodes.forEach((b) => {\n        if (b.data && b.data.match) {\n          delete b.data.match.schedule;\n        }\n      });\n    let unadvanced_double_byes = info.double_bye_nodes\n      .filter((n) => !hasBye(n))\n      .map((n) => n.data.children[0].dp);\n    unadvanced_double_byes.forEach((p) => {\n      advancePosition({ draw, position: p, bye: true, onlyIfBye: true });\n    });\n    if (unadvanced_double_byes.length) return advanceTeamsWithByes({ draw });\n  }\n\n  function hasBye(node) {\n    return (\n      node.data &&\n      node.data.team &&\n      node.data.team.reduce((p, c) => c.bye || p, undefined)\n    );\n  }\n\n  fx.findDualMatchNodeByMatch = (draw, muid) => {\n    let dual_match_muid = fx.findDualMatchMuid(draw, muid);\n    return fx.findDualMatchNode(draw, dual_match_muid);\n  };\n\n  fx.findDualMatchNode = (draw, dual_match_muid) => {\n    let info = draw && drawInfo(draw);\n    return (\n      info &&\n      info.match_nodes &&\n      info.match_nodes.reduce(\n        (p, c) =>\n          c.data.match && c.data.match.muid === dual_match_muid ? c : p,\n        undefined\n      )\n    );\n  };\n\n  fx.findDualMatchMuid = (draw, muid) => {\n    return (\n      draw.dual_matches &&\n      Object.keys(draw.dual_matches).reduce(\n        (p, c) =>\n          draw.dual_matches[c].matches.reduce(\n            (x, y) => (y.match.muid === muid ? y : x),\n            undefined\n          )\n            ? c\n            : p,\n        undefined\n      )\n    );\n  };\n\n  fx.findRRDualMatch = (draw, muid) => {\n    let dual_match_muid = fx.findDualMatchMuid(draw, muid);\n    let dual_matches = fx.matches(draw);\n    let dual_match = dual_matches.reduce(\n      (p, c) => (c.match.muid === dual_match_muid ? c : p),\n      undefined\n    );\n    return dual_match;\n  };\n\n  fx.findMatchNodeByTeamPositions = findMatchNodeByTeamPositions;\n  function findMatchNodeByTeamPositions(draw, positions) {\n    let info = drawInfo(draw);\n\n    let match_nodes = (info && info.match_nodes) || [];\n    let nodes = match_nodes\n      .filter((f) => fx.teamMatch(f))\n      .filter((match_node) => {\n        let match_positions = match_node.data.children.map((c) =>\n          c.team ? c.team[0].draw_position : undefined\n        );\n        return intersection(positions, match_positions).length === 2;\n      });\n    return nodes.length ? nodes[0].data : undefined;\n  }\n\n  fx.upcomingMatches = upcomingMatches;\n  function upcomingMatches(\n    data,\n    round_names = [],\n    calculated_round_names = []\n  ) {\n    if (!data) return [];\n    if (data.compass) return upcomingCompassMatches(data);\n\n    let info = drawInfo(data);\n    if (!info) return [];\n\n    if (info.draw_type === \"tree\") {\n      let round_offset = data.max_round ? info.depth - data.max_round : 0;\n      return treeMatches({\n        match_nodes: info.upcoming_match_nodes,\n        max_round: data.max_round,\n        round_offset,\n        round_names,\n        calculated_round_names,\n        potentials: true,\n      });\n    }\n\n    return [];\n  }\n\n  fx.treeMatches = treeMatches;\n  function treeMatches({\n    match_nodes,\n    max_round,\n    round_offset = 0,\n    round_names = [],\n    calculated_round_names = [],\n    potentials,\n    draw,\n  }) {\n    let matches = match_nodes\n      .filter((n) => potentials || teamMatch(n))\n      .filter((n) => (max_round ? n.height <= max_round : true))\n      .map((node) => {\n        let round_name = round_names.length\n          ? round_names[node.depth - round_offset]\n          : undefined;\n        if (round_name) node.data.round_name = round_name;\n\n        let calculated_round_name = calculated_round_names.length\n          ? calculated_round_names[node.depth - round_offset]\n          : undefined;\n        if (calculated_round_name)\n          node.data.calculated_round_name = calculated_round_name;\n\n        if (node.data.match && round_name)\n          node.data.match.round_name = round_name;\n        let potentials = node.data.children\n          .filter((c) => !c.team)\n          .map((p) => (p.children ? p.children.map((l) => l.team) : undefined));\n        let dependencies = node.data.children\n          .filter((c) => !c.team)\n          .map((d) => d.match && d.match.muid);\n        let dependent =\n          node.parent &&\n          node.parent.data &&\n          node.parent.data.match &&\n          node.parent.data.match.muid;\n        let this_match = {\n          dependent,\n          round_name,\n          potentials,\n          dependencies,\n          source: node,\n          round: node.height,\n          calculated_round_name,\n          match: node.data.match,\n          teams: node.data.children.map((c) => c.team).filter((f) => f),\n        };\n        if (draw) this_match.draw = draw;\n        return this_match;\n      });\n    return matches;\n  }\n\n  let compass_data = {\n    pre: {\n      east: \"E\",\n      west: \"W\",\n      north: \"N\",\n      south: \"S\",\n      northeast: \"NE\",\n      northwest: \"NW\",\n      southeast: \"SE\",\n      southwest: \"SW\",\n    },\n    names: [\"F\", \"SF\", \"QF\", \"R16\", \"R32\", \"R64\", \"R128\", \"R256\", \"R512\"],\n  };\n\n  function upcomingCompassMatches(data) {\n    let matches = []\n      .concat(\n        ...Object.keys(compass_data.pre)\n          .filter((key) => data[key])\n          .map((key) => {\n            let info = drawInfo(data[key]);\n            let max_round = data[key].max_round;\n            let round_offset = max_round ? info.depth - max_round : 0;\n            let round_names = compass_data.names.map(\n              (n) => `${compass_data.pre[key]}-${n}`\n            );\n            return treeMatches({\n              match_nodes: info.upcoming_match_nodes,\n              max_round,\n              round_offset,\n              round_names,\n              potentials: true,\n            });\n          })\n      )\n      .filter((m) => m && m.match);\n\n    return matches;\n  }\n\n  function compassMatches(data, all) {\n    let matches = [].concat(\n      ...Object.keys(compass_data.pre)\n        .filter((key) => data[key])\n        .map((key) => {\n          let info = drawInfo(data[key]);\n          let max_round = data[key].max_round;\n          let round_offset = max_round ? info.depth - max_round : 0;\n          let round_names = compass_data.names.map(\n            (n) => `${compass_data.pre[key]}-${n}`\n          );\n          let match_nodes = all ? info.all_matches : info.match_nodes;\n          return treeMatches({\n            match_nodes,\n            max_round,\n            round_offset,\n            round_names,\n            potentials: all,\n            draw: key,\n          });\n        })\n    );\n\n    return matches;\n  }\n\n  fx.extractDrawPlayers = (draw) => {\n    let players = [];\n    let draw_positions = [];\n    []\n      .concat(...fx.drawInfo(draw).nodes.map((n) => n.data && n.data.team))\n      .forEach((p) => {\n        if (draw_positions.indexOf(p.draw_position) < 0) {\n          draw_positions.push(p.draw_position);\n          players.push(p);\n        }\n      });\n    return players;\n  };\n\n  // will be replaced by drawMatches module\n  fx.matches = matches;\n  function matches(data, round_names = [], calculated_round_names = [], all) {\n    if (!data) return [];\n    if (data.compass) return compassMatches(data, all);\n\n    let info = drawInfo(data);\n    if (!info) return data.matches || [];\n\n    if (info.draw_type === \"tree\") {\n      let round_offset = data.max_round ? info.depth - data.max_round : 0;\n      let match_nodes = all ? info.all_matches : info.match_nodes;\n      return treeMatches({\n        match_nodes,\n        max_round: data.max_round,\n        round_offset,\n        round_names,\n        calculated_round_names,\n        potentials: all,\n      });\n    }\n\n    if (info.draw_type === \"roundrobin\") {\n      data.brackets.forEach((b, i) => bracketMatches(data, i));\n\n      let matches = []\n        .concat(...data.brackets.map((bracket) => bracket.matches))\n        .map((match) => {\n          return {\n            teams: match.teams || match.players.map((p) => [p]),\n            round_name: match.round_name,\n            result_order: match.result_order,\n            match,\n          };\n        });\n      return matches;\n    }\n\n    return [];\n  }\n\n  fx.tallyBracketAndModifyPlayers = ({\n    matches,\n    teams,\n    per_player,\n    reset,\n    qualifying,\n    matchFormat,\n  }) => {\n    if (!matches || !matches.length) return;\n\n    per_player = per_player || (teams && teams.length - 1) || 1;\n    let tbr = tallyBracket({ matches, per_player, qualifying, matchFormat });\n\n    let instanceCount = (values) =>\n      values.reduce((a, c) => {\n        // eslint-disable-next-line\n        a[c]++ ? 0 : (a[c] = 1);\n        return a;\n      }, {});\n    let qordz = Object.keys(tbr.team_results).map(\n      (t) => tbr.team_results[t].qorder\n    );\n    let ic = instanceCount(qordz);\n\n    let valid_for_suborder = Object.keys(ic).reduce(\n      (p, c) => (ic[c] > 1 ? p.concat(parseInt(c)) : p),\n      []\n    );\n    matches.forEach(\n      (match) => (match.results_order = tbr.match_result_order[match.muid])\n    );\n\n    teams.forEach((team) => {\n      let phash = playersHash(team);\n      if (tbr.team_results[phash]) {\n        team.forEach((player) => {\n          player.qorder = tbr.team_results[phash].qorder;\n\n          if (reset) {\n            // in this case sub_order is overridden\n            player.sub_order = tbr.team_results[phash].sub_order;\n          } else {\n            // in this context sub_order give preference to existing value\n            player.sub_order =\n              (valid_for_suborder.indexOf(player.qorder) >= 0 &&\n                player.sub_order) ||\n              tbr.team_results[phash].sub_order;\n          }\n\n          player.points_order = tbr.team_results[phash].points_order;\n          player.results = {\n            matches_won: tbr.team_results[phash].matches_won,\n            matches_lost: tbr.team_results[phash].matches_lost,\n            sets_won: tbr.team_results[phash].sets_won,\n            sets_lost: tbr.team_results[phash].sets_lost,\n            games_won: tbr.team_results[phash].games_won,\n            games_lost: tbr.team_results[phash].games_lost,\n            points_won: tbr.team_results[phash].points_won,\n            points_lost: tbr.team_results[phash].points_lost,\n\n            matches_ratio: tbr.team_results[phash].matches_ratio,\n            sets_ratio: tbr.team_results[phash].sets_ratio,\n            games_ratio: tbr.team_results[phash].games_ratio,\n            points_ratio: tbr.team_results[phash].points_ratio,\n\n            ratio_hash: tbr.team_results[phash].ratio_hash,\n          };\n          player.result = tbr.team_results[phash].result;\n          player.games = tbr.team_results[phash].games;\n        });\n      }\n    });\n\n    return true;\n  };\n\n  fx.tallyBracket = tallyBracket;\n  function tallyBracket({ matches, per_player, qualifying, matchFormat }) {\n    let bracket_match_format = matchFormatCode.parse(matchFormat) || {};\n    // if bracket is incomplete don't use expected matches per_player for calculating\n    let bracket_complete =\n      matches &&\n      matches.length &&\n      matches.filter((m) => m.winner).length === matches.length;\n    if (!bracket_complete) per_player = 0;\n\n    let disqualified = [];\n    let team_results = {};\n    let match_result_order = {};\n    let h2h = o.rr_h2h_priority;\n\n    if (!matches) return;\n\n    // for all matches winner score comes first!\n    matches\n      .filter((f) => f)\n      .forEach((match) => {\n        let match_format =\n          matchFormatCode.parse(match.matchFormat || matchFormat) || {};\n        if (match.winner && match.loser) {\n          let wH = getIdentifier(match.winner);\n          let lH = getIdentifier(match.loser);\n\n          if (!wH || !lH) {\n            // if there is an undefined winner/loser then the match was cancelled\n            let team1 =\n              match.teams && match.teams[0] && getIdentifier(match.teams[0]);\n            let team2 =\n              match.teams && match.teams[1] && getIdentifier(match.teams[1]);\n            if (team1) {\n              checkTeam(team1);\n              team_results[team1].matches_cancelled += 1;\n            }\n            if (team2) {\n              checkTeam(team2);\n              team_results[team2].matches_cancelled += 1;\n            }\n            return;\n          }\n\n          checkTeam(wH);\n          checkTeam(lH);\n          if (match.score && disqualifyingScore(match.score))\n            disqualified.push(lH);\n\n          team_results[wH].matches_won += 1;\n          team_results[lH].matches_lost += 1;\n          team_results[lH].defeats.push(wH);\n          team_results[wH].victories.push(lH);\n\n          let sets_tally = countSets(match.score, 0, match_format);\n          team_results[wH].sets_won += sets_tally[0];\n          team_results[wH].sets_lost += sets_tally[1];\n          team_results[lH].sets_won += sets_tally[1];\n          team_results[lH].sets_lost += sets_tally[0];\n\n          let games_tally = countGames(match.score, 0, match_format);\n          team_results[wH].games_won += games_tally[0];\n          team_results[wH].games_lost += games_tally[1];\n          team_results[lH].games_won += games_tally[1];\n          team_results[lH].games_lost += games_tally[0];\n\n          let points_tally = countPoints(match.score);\n          team_results[wH].points_won += points_tally[0];\n          team_results[wH].points_lost += points_tally[1];\n          team_results[lH].points_won += points_tally[1];\n          team_results[lH].points_lost += points_tally[0];\n        } else {\n          if (match.teams)\n            match.teams.forEach((team) => checkTeam(getIdentifier(team)));\n        }\n      });\n\n    function getIdentifier(opponent) {\n      if (!Array.isArray(opponent) && opponent.players && opponent.id) {\n        return opponent.id;\n      }\n      return playersHash(opponent);\n    }\n\n    function checkTeam(phash) {\n      if (!team_results[phash])\n        team_results[phash] = {\n          matches_won: 0,\n          matches_lost: 0,\n          victories: [],\n          defeats: [],\n          matches_cancelled: 0,\n          sets_won: 0,\n          sets_lost: 0,\n          games_won: 0,\n          games_lost: 0,\n          points_won: 0,\n          points_lost: 0,\n        };\n    }\n\n    // the difference here is totlas must be calcuulated using the expected\n    // match scoring format for the bracket, not the inidivudal match formats\n    let bracket_sets_to_win = scoreFx.setsToWin(bracket_match_format.bestOf);\n    let bracket_games_for_set =\n      bracket_match_format.setFormat && bracket_match_format.setFormat.setTo;\n\n    Object.keys(team_results).forEach((phash) => {\n      let sets_numerator = team_results[phash].sets_won;\n      let sets_denominator = team_results[phash].sets_lost;\n      let sets_total =\n        per_player * (bracket_sets_to_win || 0) || sets_numerator;\n      let sets_ratio =\n        Math.round((sets_numerator / sets_denominator) * 1000) / 1000;\n      if (sets_ratio === Infinity || isNaN(sets_ratio)) sets_ratio = sets_total;\n\n      let matches_numerator = team_results[phash].matches_won;\n      let matches_denominator = team_results[phash].matches_lost;\n      let matches_ratio =\n        Math.round((matches_numerator / matches_denominator) * 1000) / 1000;\n      if (matches_ratio === Infinity || isNaN(matches_ratio))\n        matches_ratio = matches_numerator;\n\n      let games_numerator = team_results[phash].games_won;\n      let games_denominator = team_results[phash].games_lost;\n      let games_total =\n        per_player *\n          (bracket_sets_to_win || 0) *\n          (bracket_games_for_set || 0) || games_numerator;\n      let games_ratio =\n        Math.round((games_numerator / games_denominator) * 1000) / 1000;\n      if (games_ratio === Infinity || isNaN(games_ratio)) {\n        games_ratio = games_total;\n      }\n      let games_difference =\n        games_denominator >= games_numerator\n          ? 0\n          : games_numerator - games_denominator;\n\n      let points_ratio =\n        Math.round(\n          (team_results[phash].points_won / team_results[phash].points_lost) *\n            1000\n        ) / 1000;\n      if (points_ratio === Infinity || isNaN(points_ratio)) points_ratio = 0;\n\n      team_results[phash].sets_ratio = sets_ratio;\n      team_results[phash].matches_ratio = matches_ratio;\n      team_results[phash].games_ratio = games_ratio;\n      team_results[phash].games_difference = games_difference;\n      team_results[phash].points_ratio = points_ratio;\n      team_results[\n        phash\n      ].result = `${team_results[phash].matches_won}/${team_results[phash].matches_lost}`;\n      team_results[\n        phash\n      ].games = `${team_results[phash].games_won}/${team_results[phash].games_lost}`;\n    });\n\n    let order = determineTeamOrder(team_results);\n\n    if (order) {\n      let ro_list = order.map((o) => o.rank_order);\n\n      order.forEach((o) => {\n        team_results[o.id].ratio_hash = o.ratio_hash;\n        if (o !== undefined && o.rank_order !== undefined) {\n          team_results[o.id].qorder = o.rank_order;\n          if (\n            occurrences(o.rank_order, ro_list) > 1 &&\n            team_results[o.id].sub_order === undefined\n          ) {\n            team_results[o.id].sub_order = 0;\n          } else if (occurrences(o.rank_order, ro_list) === 1) {\n            team_results[o.id].sub_order = undefined;\n          }\n        }\n\n        // calculate order for awarding points\n        if (o !== undefined && o.points_order !== undefined) {\n          team_results[o.id].points_order = o.points_order;\n        } else {\n          team_results[o.id].points_order = undefined;\n        }\n      });\n    }\n\n    // create an object mapping id to order\n    let id_order = Object.keys(team_results).reduce((o, t) => {\n      o[t] = team_results[t].points_order;\n      return o;\n    }, {});\n\n    matches.forEach((match) => {\n      let order =\n        match.winner_index === undefined\n          ? \"\"\n          : id_order[getIdentifier(match.winner)];\n      match_result_order[match.muid] = `RR${qualifying ? \"Q\" : \"\"}${\n        order || \"\"\n      }`;\n    });\n\n    return { team_results, match_result_order };\n\n    function walkedOver(score) {\n      return /W/.test(score) && /O/.test(score);\n    }\n    function defaulted(score) {\n      return /DEF/.test(score);\n    }\n    function retired(score) {\n      return /RET/.test(score);\n    }\n    function disqualifyingScore(score) {\n      return walkedOver(score) || defaulted(score);\n    }\n\n    function countSets(score, winner, match_format) {\n      let sets_to_win = scoreFx.setsToWin(match_format.bestOf);\n\n      let sets_tally = [0, 0];\n      if (!score) return sets_tally;\n      if (disqualifyingScore(score)) {\n        if (winner !== undefined && sets_to_win)\n          sets_tally[winner] = sets_to_win;\n      } else {\n        let set_scores = score.split(\" \");\n        set_scores.forEach((set_score) => {\n          let divider =\n            set_score.indexOf(\"-\") > 0\n              ? \"-\"\n              : set_score.indexOf(\"/\") > 0\n              ? \"/\"\n              : undefined;\n          let scores =\n            // eslint-disable-next-line no-useless-escape\n            /\\d+[\\(\\)\\-\\/]*/.test(set_score) && divider\n              ? set_score.split(divider).map((s) => /\\d+/.exec(s)[0])\n              : undefined;\n          if (scores) {\n            sets_tally[parseInt(scores[0]) > parseInt(scores[1]) ? 0 : 1] += 1;\n          }\n        });\n      }\n      if (retired(score) && winner !== undefined && sets_to_win) {\n        // if the loser has sets_to_win then last set was incomplete and needs to be subtracted from loser\n        if (+sets_tally[1 - winner] === sets_to_win)\n          sets_tally[1 - winner] -= 1;\n        sets_tally[winner] = sets_to_win;\n      }\n      return sets_tally;\n    }\n\n    function countPoints(score) {\n      let points_tally = [0, 0];\n      if (!score) return points_tally;\n      let set_scores = score.split(\" \");\n      set_scores.forEach((set_score) => {\n        let scores = /\\d+\\/\\d+/.test(set_score)\n          ? set_score.split(\"/\").map((s) => /\\d+/.exec(s)[0])\n          : [0, 0];\n        if (scores) {\n          points_tally[0] += parseInt(scores[0]);\n          points_tally[1] += parseInt(scores[1]);\n        }\n      });\n      return points_tally;\n    }\n\n    function countGames(score, winner, match_format) {\n      let sets_to_win = scoreFx.setsToWin(match_format.bestOf);\n      let games_for_set =\n        match_format.setFormat && match_format.setFormat.setTo;\n      let tiebreaks_at =\n        match_format.setFormat && match_format.setFormat.tiebreakAt;\n      if (!score) return [0, 0];\n      let min_winning_games = sets_to_win * games_for_set;\n      let games_tally = [[], []];\n      if (disqualifyingScore(score)) {\n        if (winner !== undefined && sets_to_win && games_for_set) {\n          games_tally[winner].push(min_winning_games);\n        }\n      } else {\n        let set_scores = score.split(\" \");\n        set_scores.forEach((set_score) => {\n          let scores =\n            // eslint-disable-next-line no-useless-escape\n            /\\d+[\\(\\)\\-\\/]*/.test(set_score) && set_score.indexOf(\"-\") > 0\n              ? set_score.split(\"-\").map((s) => /\\d+/.exec(s)[0])\n              : undefined;\n          if (scores) {\n            games_tally[0].push(parseInt(scores[0]));\n            games_tally[1].push(parseInt(scores[1]));\n          }\n        });\n      }\n      if (\n        retired(score) &&\n        winner !== undefined &&\n        sets_to_win &&\n        games_for_set\n      ) {\n        let sets_tally = countSets(score, winner, match_format);\n        let total_sets = sets_tally.reduce((a, b) => a + b, 0);\n        let loser_lead_set = games_tally\n          .map((g) => g[winner] <= g[1 - winner])\n          .reduce((a, b) => a + b, 0);\n        // if sets where loser lead > awarded sets, adjust last game to winner\n        if (loser_lead_set > sets_tally[1 - winner]) {\n          let tallied_games = games_tally[winner].length;\n          let complement = getComplement(\n            games_tally[1 - winner][tallied_games - 1]\n          );\n          if (complement) games_tally[winner][tallied_games - 1] = complement;\n        }\n        // if the total # of sets is less than games_tally[x].length award games_for_set to winner\n        if (total_sets > games_tally[winner].length) {\n          games_tally[winner].push(games_for_set);\n        }\n      }\n      let result = [\n        games_tally[0].reduce((a, b) => a + b, 0),\n        games_tally[1].reduce((a, b) => a + b, 0),\n      ];\n      if (winner !== undefined && result[winner] < min_winning_games)\n        result[winner] = min_winning_games;\n      return result;\n\n      function getComplement(value) {\n        if (!match_format || value === \"\") return;\n        if (+value === tiebreaks_at - 1 || +value === tiebreaks_at)\n          return parseInt(tiebreaks_at || 0) + 1;\n        if (+value < tiebreaks_at) return games_for_set;\n        return tiebreaks_at;\n      }\n    }\n\n    function determineTeamOrder(team_results) {\n      let team_ids = Object.keys(team_results);\n      let total_opponents = team_ids.length;\n\n      // order is an array of objects formatted for processing by ties()\n      let order = team_ids.reduce((arr, team_id, i) => {\n        arr.push({ id: team_id, i, results: team_results[team_id] });\n        return arr;\n      }, []);\n      let complete = order.filter(\n        (o) =>\n          total_opponents - 1 ===\n          o.results.matches_won +\n            o.results.matches_lost +\n            o.results.matches_cancelled\n      );\n\n      // if not all opponents have completed their matches, no orders are assigned\n      if (total_opponents !== complete.length) {\n        return;\n      }\n\n      complete.forEach((p) => (p.order_hash = orderHash(p)));\n      complete.forEach((p) => (p.ratio_hash = ratioHash(p)));\n\n      // START ORDER HASH\n      if (h2h) {\n        complete.sort(\n          (a, b) => (b.results.matches_won || 0) - (a.results.matches_won || 0)\n        );\n        let wins = complete.map((p) => p.results.matches_won);\n        let counts = unique(wins);\n        counts.forEach((count) => {\n          let i = indices(count, wins);\n          if (i.length && i.length > 1) {\n            let start = Math.min(...i);\n            let end = Math.max(...i);\n            let n = end - start + 1;\n            if (n === 2) {\n              complete = subSort(complete, start, n, h2hOrder);\n            } else {\n              complete = subSort(complete, start, n, orderHashSort);\n            }\n          }\n        });\n      } else {\n        complete.sort(orderHashSort);\n      }\n\n      let hash_order = unique(complete.map((c) => c.order_hash));\n      complete.forEach(\n        (p) => (p.hash_order = hash_order.indexOf(p.order_hash) + 1)\n      );\n\n      // now account for equivalent hash_order\n      let rank_order = 0;\n      let rank_hash = undefined;\n      complete.forEach((p, i) => {\n        if (p.order_hash !== rank_hash) {\n          rank_order = i + 1;\n          rank_hash = p.order_hash;\n        }\n        p.rank_order = rank_order;\n      });\n      // END ORDER HASH\n\n      // START RATIO HASH\n      if (h2h) {\n        complete.sort(\n          (a, b) => (b.results.matches_won || 0) - (a.results.matches_won || 0)\n        );\n        let wins = complete.map((p) => p.results.matches_won);\n        let counts = unique(wins);\n        counts.forEach((count) => {\n          let i = indices(count, wins);\n          if (i.length && i.length > 1) {\n            let start = Math.min(...i);\n            let end = Math.max(...i);\n            let n = end - start + 1;\n            if (n === 2) {\n              complete = subSort(complete, start, n, h2hRatio);\n            } else {\n              complete = subSort(complete, start, n, ratioHashSort);\n            }\n          }\n        });\n      } else {\n        complete.sort(ratioHashSort);\n      }\n\n      let ratio_order = unique(complete.map((c) => c.ratio_hash));\n      complete.forEach(\n        (p) => (p.ratio_order = ratio_order.indexOf(p.ratio_hash) + 1)\n      );\n\n      // points_order is used for awarding points and may differ from\n      // rank_order if a player unable to advance due to walkover\n      let points_order = 0;\n      let ratio_hash = undefined;\n      complete.forEach((p, i) => {\n        if (p.ratio_hash !== ratio_hash) {\n          points_order = i + 1;\n          ratio_hash = p.ratio_hash;\n        }\n        p.points_order = points_order;\n      });\n      // END RATIO HASH\n\n      return complete;\n\n      function ratioHashSort(a, b) {\n        return b.ratio_hash - a.ratio_hash;\n      }\n      function orderHashSort(a, b) {\n        return b.order_hash - a.order_hash;\n      }\n      function h2hRatio(a, b) {\n        let h2h_a = a.results.victories.indexOf(b.id) >= 0;\n        let h2h_b = b.results.victories.indexOf(a.id) >= 0;\n        if (h2h_a || h2h_b) {\n          return h2h_b ? 1 : -1;\n        }\n        return b.ratio_hash - a.ratio_hash;\n      }\n\n      function h2hOrder(a, b) {\n        let h2h_a = a.results.victories.indexOf(b.id) >= 0;\n        let h2h_b = b.results.victories.indexOf(a.id) >= 0;\n        if (h2h_a || h2h_b) {\n          return h2h_b ? 1 : -1;\n        }\n        return b.order_hash - a.order_hash;\n      }\n\n      function orderHash(p) {\n        if (disqualified.indexOf(p.id) >= 0) return 0;\n        return ratioHash(p);\n      }\n      function ratioHash(p) {\n        let rh;\n        if (h2h) {\n          rh =\n            p.results.matches_ratio * Math.pow(10, 16) +\n            p.results.sets_ratio * Math.pow(10, 12) +\n            p.results.games_difference * Math.pow(10, 8) +\n            p.results.points_ratio * Math.pow(10, 3);\n        } else {\n          rh =\n            p.results.matches_ratio * Math.pow(10, 16) +\n            p.results.sets_ratio * Math.pow(10, 12) +\n            p.results.games_ratio * Math.pow(10, 8) +\n            p.results.points_ratio * Math.pow(10, 3);\n        }\n        return rh;\n      }\n    }\n  }\n\n  function keyWalk(valuesObject, optionsObject) {\n    if (!valuesObject || !optionsObject) return;\n    var vKeys = Object.keys(valuesObject);\n    var oKeys = Object.keys(optionsObject);\n    for (var k = 0; k < vKeys.length; k++) {\n      if (oKeys.indexOf(vKeys[k]) >= 0) {\n        var oo = optionsObject[vKeys[k]];\n        var vo = valuesObject[vKeys[k]];\n        if (\n          oo &&\n          typeof oo === \"object\" &&\n          typeof vo !== \"function\" &&\n          oo.constructor !== Array\n        ) {\n          keyWalk(valuesObject[vKeys[k]], optionsObject[vKeys[k]]);\n        } else {\n          optionsObject[vKeys[k]] = valuesObject[vKeys[k]];\n        }\n      }\n    }\n  }\n\n  return fx;\n}\n","import { typeCheck as tc } from \"./typeCheck\";\nimport { courtData, ctuuid } from \"./courtFx\";\nimport { scoreFx } from \"./scoreFx\";\nimport { dateFx } from \"./dateFx\";\nimport { drawFx } from \"./drawFx\";\nimport { UUID } from \"./UUID\";\n\nexport const matchFx = (function () {\n  let fx = {};\n  let dfx = drawFx();\n\n  // create an array of ids of all players who are selected for any event\n  // used to prevent sign-out of approved players\n  // if dual matches then get a list of all players who are part of any defined match\n  fx.activeTeamPlayers = ({ tournament }) => {\n    if (!tc.isTeam({ tournament }) || !tournament.events) return [];\n    let {\n      completed_matches,\n      pending_matches,\n      upcoming_matches,\n    } = fx.tournamentEventMatches({ tournament });\n    let all_matches = [].concat(\n      ...pending_matches,\n      ...upcoming_matches,\n      completed_matches\n    );\n    return []\n      .concat(...all_matches.map((m) => m.players))\n      .map((p) => p && p.id)\n      .filter((f) => f);\n  };\n\n  fx.matchPlayers = ({ match, potentials }) => {\n    if (!match) return [];\n    let pc = !potentials\n      ? []\n      : flatten(\n          match.potentials || (match.match && match.match.potentials) || []\n        ).filter((f) => f && f.id);\n\n    let teams = flatten(\n      match.teams || (match.match && match.match.teams) || []\n    ).filter((f) => f.id);\n    if (teams.length) {\n      return flatten(teams.concat(...pc));\n    }\n\n    let players = flatten(\n      match.players || (match.match && match.match.players) || []\n    ).filter((f) => f && f.id);\n    if (players.length) {\n      return flatten(players.concat(...pc));\n    }\n\n    let winners = flatten(\n      match.winner || (match.match && match.match.winner) || []\n    ).filter((f) => f && f.id);\n    let losers = flatten(\n      match.loser || (match.match && match.match.loser) || []\n    ).filter((f) => f && f.id);\n\n    let match_players = pc.concat(...winners, ...losers);\n    console.log({ match_players });\n    return match_players;\n  };\n\n  fx.opponentsInclude = ({ match, potentials, ids }) => {\n    let opponents = fx.matchPlayers({ match, potentials }).filter((f) => f);\n    let include_ids = opponents.reduce(\n      (p, c) => ids.indexOf(c.id) >= 0 || p,\n      false\n    );\n    return include_ids;\n  };\n\n  fx.removeMatchSchedule = ({ e, tournament, opponent_ids, env }) => {\n    if (!e || !tournament || !opponent_ids) return;\n    let event_matches = eventMatches(e, tournament, false, env);\n    let match = event_matches.reduce(\n      (p, match) =>\n        fx.opponentsInclude({ match, ids: opponent_ids }) ? match : p,\n      undefined\n    );\n    if (match && match.schedule) match.schedule = {};\n    if (match && match.match && match.match.schedule) match.match.schedule = {};\n  };\n\n  // Returns NEW objects; modifications don't change originals\n  // if 'source' is true, then source object is included...\n  fx.tournamentEventMatches = tournamentEventMatches;\n  function tournamentEventMatches({ tournament, source, env }) {\n    if (!tournament.events)\n      return {\n        completed_matches: [],\n        pending_matches: [],\n        upcoming_matches: [],\n        total_matches: 0,\n      };\n\n    let total_matches = 0;\n    var completed_matches = [];\n    var pending_matches = [];\n    var upcoming_matches = [];\n\n    // don't sort tournament.events ... sort map of tournament draw types\n    function drawTypeSort(draw_type) {\n      return [\"R\", \"Q\"].indexOf(draw_type) >= 0 ? 0 : 1;\n    }\n    var ordered_events = tournament.events\n      .map((e, index) => ({ draw_type: e.draw_type, index }))\n      .sort((a, b) => drawTypeSort(a.draw_type) - drawTypeSort(b.draw_type));\n\n    ordered_events.forEach((oe) => {\n      let e = tournament.events[oe.index];\n      if (tc.isRoundRobin({ e })) dfx.roundRobinRounds({ event: e });\n      let { complete, incomplete, upcoming } = eventMatchStorageObjects({\n        tournament,\n        e,\n        source,\n        env,\n      });\n\n      if (tc.isRoundRobin({ e })) {\n        complete.sort(\n          (a, b) =>\n            a.round_name &&\n            b.round_name &&\n            a.round_name.localeCompare(b.round_name)\n        );\n        incomplete.sort(\n          (a, b) =>\n            a.round_name &&\n            b.round_name &&\n            a.round_name.localeCompare(b.round_name)\n        );\n        upcoming.sort(\n          (a, b) =>\n            a.round_name &&\n            b.round_name &&\n            a.round_name.localeCompare(b.round_name)\n        );\n      }\n      completed_matches = completed_matches.concat(...complete);\n      pending_matches = pending_matches.concat(...incomplete);\n      upcoming_matches = upcoming_matches.concat(...upcoming);\n    });\n\n    total_matches = completed_matches.length + pending_matches.length;\n\n    return {\n      completed_matches,\n      pending_matches,\n      upcoming_matches,\n      total_matches,\n    };\n  }\n\n  function eventMatchStorageObjects({ tournament, e, source, env }) {\n    if (!e.draw) return { complete: [], incomplete: [], upcoming: [] };\n\n    let event_matches = eventMatches(e, tournament, false, env);\n\n    // for Round Robin Draw to be considered qualification it needs to be linked to an Elimination Draw\n    let draw_format = e.draw.brackets ? \"round_robin\" : \"tree\";\n    if (draw_format === \"round_robin\" && (!e.links || !e.links[\"E\"])) {\n      event_matches.forEach((match) => {\n        if (match.round_name)\n          match.round_name = match.round_name.replace(\"Q\", \"\");\n      });\n    }\n\n    let complete = event_matches\n      .filter((f) => f.match && f.match.winner && f.match.loser)\n      .map((m) => matchStorageObject({ tournament, e, match: m, source }))\n      .filter((f) => f);\n\n    let incomplete = event_matches\n      .filter((f) => f.match && !f.match.winner && !f.match.loser)\n      .map((m) => matchStorageObject({ tournament, e, match: m, source }))\n      .filter(\n        (m) =>\n          (m.players && m.players.filter((f) => f).length) ||\n          (m.potentials && m.potentials.length)\n      );\n\n    let upcoming =\n      upcomingEventMatches({ e, tournament, env })\n        .map((m) => matchStorageObject({ tournament, e, match: m, source }))\n        .filter((f) => f) || [];\n\n    return { complete, incomplete, upcoming };\n  }\n\n  function matchStorageObject({ tournament, e, match, source }) {\n    if (!match.match) return;\n\n    let players = [];\n    let team_players;\n    let match_teams = safeArr(match.teams);\n\n    if (!match_teams.length) {\n      players = [];\n      team_players = [];\n    } else if (match.match.winner && match.match.winner[0]) {\n      let team0 = safeArr(match_teams[0]);\n      let team1 = safeArr(match_teams[1]);\n      players = [].concat(...team0, ...team1);\n      team_players = [\n        team0.map((p, i) => i),\n        team1.map((p, i) => team0.length + i),\n      ];\n    } else {\n      players = [].concat(...match_teams);\n      team_players = match_teams.map((t, i) =>\n        !t ? [null] : t.map((m, j) => i * t.length + j)\n      );\n    }\n\n    let coords;\n    let schedule = match.match.schedule;\n    if (schedule && schedule.luid && tournament.locations) {\n      let loc = tournament.locations.reduce(\n        (p, c) => (c.luid === schedule.luid ? c : p),\n        undefined\n      );\n      if (loc) coords = { latitude: loc.latitude, longitude: loc.longitude };\n    }\n\n    let matchFormat = match.match.matchFormat || e.matchFormat;\n\n    let obj = {\n      consolation: tc.isConsolation({ e }),\n      draw_positions: e.draw_size,\n      date: match.match.date,\n      schedule,\n      location: coords,\n      format:\n        tc.isDoubles({ match }) || tc.isDoubles({ e }) ? \"doubles\" : \"singles\",\n      gender: e.gender,\n      muid: match.match.muid,\n      ids: players.filter((p) => p).map((p) => p.id),\n\n      // TODO: These need object copy\n      players,\n      teams: match.teams,\n      set_scores: match.match.set_scores,\n\n      // TODO: should be => teams: team_players,\n      team_players,\n\n      dependent: match.dependent,\n      dependencies: match.dependencies,\n\n      // potential opponents for upcoming matches\n      potentials: match.potentials,\n\n      result_order: match.result_order,\n      round: match.round || match.match.round,\n      round_name: match.round_name || match.match.round_name,\n      calculated_round_name: match.calculated_round_name,\n\n      // all score related details should be stored in an object...\n      score: match.match.score,\n\n      matchFormat,\n      delegated_score: match.match.delegated_score,\n\n      status: match.match.status,\n      tournament: {\n        name: tournament.name,\n        tuid: tournament.tuid,\n        org: tournament.org,\n        start: tournament.start,\n        end: tournament.end,\n        rank: tournament.rank,\n      },\n      event: {\n        name: e.name,\n        rank: e.rank,\n        euid: e.euid,\n        surface: e.surface,\n        category: e.category,\n        draw_type: e.draw_type,\n        custom_category: e.custom_category,\n      },\n      dual_match: match.dual_match,\n      sequence: match.sequence,\n      umpire: match.match.umpire,\n\n      // TODO: can this be removed?\n      winner: match.match.winner_index,\n\n      winner_index: match.match.winner_index,\n    };\n\n    if (source) obj.source = match.match;\n    return obj;\n  }\n\n  fx.matchOutcome = matchOutcome;\n  function matchOutcome(match, id) {\n    let player_won = null;\n    let winning_ids = [];\n    let winning_team;\n    let losing_team;\n    let losing_ids = [];\n\n    // TODO: this is a patch for matches from database\n    // .teams needs to be updated to .team_players\n    if (!match.team_players) match.team_players = match.teams;\n\n    if (match.winner !== undefined) {\n      winning_team = match.team_players[match.winner]\n        .map((pindex) => {\n          let player = match.players[pindex];\n          winning_ids.push(player.id);\n          if (player.id === id) player_won = true;\n          return `${fullName(player)}${\n            player.rank ? \" [\" + player.rank + \"]\" : \"\"\n          }`;\n        })\n        .join(\"; \");\n\n      losing_team = match.team_players[1 - match.winner]\n        .map((pindex) => {\n          let player = match.players[pindex];\n          if (!player) return \"Undefined\";\n          losing_ids.push(player.id);\n          if (player.id === id) player_won = false;\n          return `${fullName(player)}${\n            player.rank ? \" [\" + player.rank + \"]\" : \"\"\n          }`;\n        })\n        .join(\"; \");\n    }\n\n    return { player_won, winning_team, losing_team, winning_ids, losing_ids };\n  }\n\n  function fullName(p) {\n    return `${p.last_name.toUpperCase()}, ${p.first_name}`;\n  }\n\n  fx.scheduledMatches = scheduledMatches;\n  function scheduledMatches({ tournament, env }) {\n    let {\n      completed_matches,\n      pending_matches,\n      upcoming_matches,\n    } = tournamentEventMatches({ tournament, source: true, env });\n    let all_matches = completed_matches.concat(\n      ...pending_matches,\n      ...upcoming_matches\n    );\n    let scheduled = all_matches.filter((m) => m.schedule && m.schedule.day);\n    let days = unique(scheduled.map((m) => m.schedule.day));\n    return { scheduled, days };\n  }\n\n  function upcomingEventMatches({ e, tournament, env }) {\n    if (!e.draw) return [];\n    if (tc.isTeam({ tournament, e })) return [];\n    let round_names = roundNames(tournament, e);\n    let matches = dfx.upcomingMatches(\n      e.draw,\n      round_names.names,\n      round_names.calculated_names\n    );\n    return checkScheduledMatches({ e, tournament, matches, env });\n  }\n\n  fx.dualMatchMatches = (e, muid) => {\n    if (!e.draw) return [];\n    if (!e.draw.dual_matches) return [];\n    if (muid && e.draw.dual_matches[muid]) {\n      return e.draw.dual_matches[muid].matches || [];\n    } else {\n      let matches = [];\n      Object.keys(e.draw.dual_matches || {}).forEach((key) => {\n        let dual_matches = e.draw.dual_matches[key].matches || [];\n        dual_matches.forEach((dm) => (dm.dual_match = key));\n        matches = matches.concat(...dual_matches);\n      });\n      return matches;\n    }\n  };\n\n  fx.eventMatches = eventMatches;\n  function eventMatches(e, tournament, all, env) {\n    let matches = [];\n    if (!e || !e.draw) {\n      return matches;\n    }\n    if (tc.isAdHoc({ e })) {\n      matches = safeArr(e.draw && e.draw.matches);\n    } else if (tc.isTeam({ tournament, e })) {\n      Object.keys(e.draw.dual_matches || {}).forEach((key) => {\n        let dual_matches = e.draw.dual_matches[key].matches || [];\n        dual_matches.forEach((dm) => (dm.dual_match = key));\n        matches = matches.concat(...dual_matches);\n      });\n    } else {\n      let round_names = roundNames(tournament, e);\n      matches = dfx.matches(\n        e.draw,\n        round_names.names,\n        round_names.calculated_names,\n        all\n      );\n    }\n    checkScheduledMatches({ e, tournament, matches, env });\n    return matches;\n  }\n\n  fx.containsGUIDplayer = (match) => {\n    let players =\n      match &&\n      ((match.match && match.match.players) ||\n        (match.teams && [].concat(...match.teams)));\n    let GUIDplayers =\n      players &&\n      players.reduce(\n        (p, c) =>\n          c && c.id && c.id.length >= 36 && c.id.split(\"-\").length === 5\n            ? true\n            : p,\n        false\n      );\n    return GUIDplayers;\n  };\n\n  function findEventByID(tournament, id) {\n    if (!tournament || !tournament.events || tournament.events.length < 1)\n      return;\n    return tournament.events.reduce(\n      (p, c) => (c.euid === id ? c : p),\n      undefined\n    );\n  }\n\n  fx.roundNames = roundNames;\n  function roundNames(tournament, e) {\n    var names = [];\n    var calculated_names = [];\n    if (tc.hasRoundNames({ e })) {\n      if (tc.isFeedIn({ e })) {\n        names = [\"F\", \"SF\", \"QF\"];\n        let depth = dfx.drawInfo(e.draw).depth;\n        if (depth > 3) {\n          let rounds = numArr(depth - 3)\n            .map((d) => `R${d + 1}`)\n            .reverse();\n          names = names.concat(...rounds);\n        }\n      } else {\n        names = [\"F\", \"SF\", \"QF\", \"R16\", \"R32\", \"R64\", \"R128\", \"R256\", \"R512\"];\n      }\n    }\n    if (tc.isQualifying({ e })) {\n      names = [\"Q\", \"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\"];\n      let qlink = e.links && findEventByID(tournament, e.links[\"E\"]);\n      if (qlink && qlink.draw) {\n        let info = dfx.drawInfo(qlink.draw);\n        if (info)\n          calculated_names = [\n            \"F\",\n            \"SF\",\n            \"QF\",\n            \"R16\",\n            \"R32\",\n            \"R64\",\n            \"R128\",\n            \"R256\",\n            \"R512\",\n            \"R1024\",\n          ].slice(info.depth);\n      }\n    }\n    if (tc.isPlayoff({ e })) {\n      names = [\"PO3\"];\n    }\n    return { names, calculated_names };\n  }\n\n  fx.checkScheduledMatches = checkScheduledMatches;\n  function checkScheduledMatches({ e, tournament, matches, env }) {\n    addMUIDs(e);\n\n    let court_names = {};\n    let max_matches_per_court =\n      (env && env.schedule.max_matches_per_court) || 14;\n    safeArr(tournament.locations)\n      .map((l) => l.luid)\n      .forEach((luid) =>\n        courtData(tournament, luid, max_matches_per_court).forEach(\n          (ct) => (court_names[ctuuid(ct)] = ct.name)\n        )\n      );\n    let check_names = Object.keys(court_names).length;\n\n    matches.forEach((match) => {\n      let schedule = match.match && match.match.schedule;\n      if (schedule) {\n        if (check_names) schedule.court = court_names[ctuuid(schedule)];\n        if (schedule && schedule.oop_round && schedule.luid) {\n          let court_matches = matches\n            .filter(\n              (m) =>\n                m.match &&\n                m.match.schedule &&\n                ctuuid(m.match.schedule) === ctuuid(schedule)\n            )\n            .filter(\n              (m) =>\n                m.match.schedule.oop_round < schedule.oop_round &&\n                m.match.winner === undefined\n            );\n          schedule.after = court_matches.length;\n        }\n        if (schedule.time) {\n          schedule.time = dateFx.convertTime(schedule.time, env);\n        }\n      }\n    });\n\n    return matches || [];\n  }\n\n  fx.eventRoundConsolationReady = ({ draw, round }) => {\n    let info = draw && dfx.drawInfo(draw);\n    if (!info || !round || isNaN(round)) return;\n    let round_matches = safeArr(info.all_matches).filter(\n      (f) => +f.height === +round\n    );\n    let with_team = round_matches.filter((m) => m && m.data && m.data.team);\n\n    return round_matches.length === with_team.length;\n  };\n\n  fx.getLuckyLosers = ({ tournament, evnt, env }) => {\n    let all_rounds = env.drawFx.ll_all_rounds;\n    let completed_matches =\n      (tournament &&\n        fx\n          .eventMatches(evnt, tournament, false, env)\n          .filter((m) => m.match.winner)) ||\n      [];\n    if (!all_rounds && tc.isQualifying({ e: evnt }))\n      completed_matches = completed_matches.filter(\n        (m) => m.match.round_name === \"Q\"\n      );\n    let losing_ids = [].concat(\n      ...completed_matches.map((match) =>\n        match.match.loser.map((team) => team.id)\n      )\n    );\n    let qualifying_ids =\n      (evnt &&\n        evnt.qualified &&\n        evnt.qualified.length &&\n        evnt.qualified.map((q) => q[0].id)) ||\n      [];\n    let losing_players =\n      (tournament &&\n        tournament.players.filter(\n          (p) =>\n            losing_ids.indexOf(p.id) >= 0 && qualifying_ids.indexOf(p.id) < 0\n        )) ||\n      [];\n    console.log({ qualifying_ids, losing_ids, losing_players });\n    return { losing_ids, losing_players };\n  };\n\n  fx.addMUIDs = addMUIDs;\n  function addMUIDs(e) {\n    if (!e.draw) return;\n    let current_draw = e.draw.compass ? e.draw[e.draw.compass] : e.draw;\n    if (!current_draw) return;\n\n    if (e.draw.compass) {\n      dfx.compassInfo(e.draw).all_matches.forEach(addMUID);\n    } else if (e.draw.brackets) {\n      e.draw.brackets.forEach((bracket) =>\n        bracket.matches.forEach((match) => {\n          if (!match.muid) match.muid = UUID.new();\n          match.euid = e.euid;\n        })\n      );\n    } else {\n      let info = dfx.drawInfo(current_draw);\n      if (info && info.nodes) info.nodes.forEach(addMUID);\n    }\n\n    function addMUID(node) {\n      let muid = (node.data && node.data.nuid) || UUID.new();\n      if (node.children) {\n        if (!node.data.match) node.data.match = {};\n        if (!node.data.match.muid) node.data.match.muid = muid;\n        if (!node.data.match.euid) node.data.match.euid = e.euid;\n      }\n    }\n  }\n\n  fx.determineGender = (match) => {\n    let genders = match.players\n      ? match.players\n          .filter((f) => f)\n          .map((p) => p.sex)\n          .filter((f) => f)\n          .filter((item, i, s) => s.lastIndexOf(item) === i)\n      : [];\n    return !genders.length ? \"\" : genders.length > 1 ? \"X\" : genders[0];\n  };\n\n  fx.matchTime = (match, env) =>\n    (match.schedule &&\n      match.schedule.time &&\n      dateFx.convertTime(match.schedule.time, env)) ||\n    \"\";\n  fx.matchRound = (match) => match.round_name || match.round;\n  fx.matchDate = (match) => {\n    if (match.schedule && match.schedule.day)\n      return datePDF(new Date(match.schedule.day));\n    if (match.date) return datePDF(match.date);\n    return \"\";\n  };\n\n  fx.matchDesignator = ({ tournament, match }) => {\n    let evt =\n      match && match.event && findEventByID(tournament, match.event.euid);\n    let category = (evt && evt.category && evt.category.slice(0, 4)) || \"\";\n    return `${evt.gender}${evt.format}${category}`;\n  };\n\n  fx.matchDateDisplay = (match) => {\n    if (match.schedule && match.schedule.day)\n      return displayDate(new Date(match.schedule.day));\n    if (match.date) return displayDate(match.date);\n    return \"\";\n  };\n\n  fx.matchDuration = (match) => {\n    if (match.schedule && match.schedule.start && match.schedule.end) {\n      let d = duration(match.schedule.start, match.schedule.end);\n      return `<b>${d}</b>`;\n    }\n    return \"\";\n\n    function duration(start, end) {\n      var seconds = getSeconds(end) - getSeconds(start);\n      if (seconds <= 0) seconds = getSeconds(end, 12) - getSeconds(start);\n      if (seconds <= 0) seconds = getSeconds(end, 12) - getSeconds(start, -12);\n      var hours = Math.floor(seconds / (60 * 60));\n      var minutes = Math.floor(seconds - hours * 60 * 60) / 60;\n      return `${zeroPad(hours)}:${zeroPad(minutes)}`;\n    }\n    function getSeconds(hm, mod = 0) {\n      var a = hm.split(\":\");\n      var getNum = (x) => (x && !isNaN(x) ? +x : 0);\n      var hours = getNum(a[0]) + mod;\n      var minutes = getNum(a[1]);\n      return hours * 60 * 60 + minutes * 60;\n    }\n  };\n\n  fx.roundPosition = ({ match, info, backdrawTarget }) => {\n    let all_matches = info && info.all_matches;\n    let match_node =\n      all_matches &&\n      all_matches.reduce(\n        (p, n) => (n.data?.match?.muid === match?.muid ? n : p),\n        undefined\n      );\n    let match_round =\n      all_matches &&\n      all_matches.filter((n) => match_node && match_node.depth === n.depth);\n    let backdraw_target =\n      all_matches &&\n      all_matches.filter(\n        (n) => match_node && !dfx.byeNode(n) && match_node.depth === n.depth\n      );\n\n    let round = backdrawTarget ? backdraw_target : match_round;\n\n    let muids =\n      round &&\n      round\n        .map((n) => n && n.data && n.data.match && n.data.match.muid)\n        .filter((f) => f);\n    let index = muids && muids.indexOf(match?.muid);\n    return index >= 0 ? (index + 1).toString() : \"\";\n  };\n\n  fx.roundNumber = ({ match, info, DrawStructure }) => {\n    let all_matches = info && info.all_matches;\n    let match_node =\n      all_matches &&\n      all_matches.reduce(\n        (p, n) => (n.data?.match?.muid === match?.muid ? n : p),\n        undefined\n      );\n    let match_node_depth = (match_node && match_node.depth) || 0;\n    let round = info && info.depth ? info.depth - match_node_depth : \"\";\n    let rr_round = DrawStructure === \"ROUND-ROBIN\" ? match.round : \"\";\n    return (round || rr_round || \"\").toString();\n  };\n\n  fx.matchFinish = (match) => {\n    return match.schedule && match.schedule.end ? match.schedule.end : \"\";\n  };\n  fx.matchCourt = (match) => {\n    return (match.schedule && match.schedule.court) || \"\";\n  };\n\n  fx.matchScore = (match, non_breaking) => {\n    let scr = match.score || match.delegated_score || \"\";\n    if (match.winner_index === 1) scr = scoreFx.reverseScore(scr);\n    // eslint-disable-next-line no-useless-escape\n    return scr && non_breaking ? scr.replace(/\\-/g, \"&#8209;\") : scr;\n  };\n\n  fx.isByeMatch = (match) =>\n    match &&\n    match.players &&\n    match.players\n      .filter((f) => f)\n      .reduce((p, c) => (c.bye ? true : p), undefined);\n  fx.idInMatch = ({ match, id }) =>\n    match &&\n    match.players &&\n    match.players.reduce((p, c) => (c.id === id ? true : p), undefined);\n\n  function datePDF(timestamp) {\n    console.log({ timestamp });\n    let date = dateFx.offsetDate(timestamp);\n    return [zeroPad(date.getMonth() + 1), zeroPad(date.getDate())].join(\"-\");\n  }\n\n  function displayDate(timestamp) {\n    let date = dateFx.offsetDate(timestamp);\n    return [zeroPad(date.getMonth() + 1), zeroPad(date.getDate())].join(\n      \"&#8209;\"\n    );\n  }\n\n  return fx;\n})();\n\nfunction numArr(count) {\n  return [...Array(count)].map((_, i) => i);\n}\nfunction zeroPad(number) {\n  return number.toString()[1] ? number : \"0\" + number;\n}\nfunction unique(arr) {\n  return arr.filter((item, i, s) => s.lastIndexOf(item) === i);\n}\nfunction safeArr(x) {\n  return (\n    (Array.isArray(x) && x) ||\n    (typeof x === \"object\" && Object.keys(x).map((k) => x[k])) ||\n    []\n  );\n}\nfunction flatten(arr) {\n  return arr.reduce(\n    (flat, toFlatten) =>\n      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten),\n    []\n  );\n}\n","import { drawDefinitionConstants } from \"tods-competition-factory\";\nimport { tournamentEngine } from \"tods-competition-factory\";\nimport { extractMatchUp } from \"./extractMatchUp\";\nimport { getStage } from \"./utilities\";\nimport { matchFx } from \"./matchFx\";\nimport { drawFx } from \"./drawFx\";\nimport { UUID } from \"./UUID\";\n\nconst { CONTAINER, ITEM, ROUND_OUTCOME, WIN_RATIO } = drawDefinitionConstants;\n\nconst dfx = drawFx();\n\nexport function getStructureContent({\n  eventType,\n  tieFormat,\n  tournament,\n  legacyEvent,\n  participants,\n}) {\n  const legacyDual = tournament.type === \"dual\";\n  const totalPlayers =\n    legacyEvent.approved.length + (legacyEvent.qualifiers || 0) ||\n    legacyEvent.feed_base ||\n    legacyEvent.draw_size;\n  const seedLimit = dfx.seedLimit({\n    total_players: totalPlayers,\n    evt: legacyEvent,\n  });\n\n  const entryStage = getStage({ legacyEvent });\n  const info = dfx.drawInfo(legacyEvent.draw);\n\n  const props = {\n    participants,\n    legacyEvent,\n    tournament,\n    legacyDual,\n    seedLimit,\n    entryStage,\n    tieFormat,\n    eventType,\n    info,\n  };\n\n  const result = legacyEvent?.draw?.brackets\n    ? roundRobinStructure(props)\n    : eliminationStructure(props);\n\n  return result;\n}\n\nfunction eliminationStructure({\n  legacyEvent,\n  tournament,\n  tieFormat,\n  legacyDual,\n  seedLimit,\n  entryStage,\n  participants,\n  eventType,\n  info,\n}) {\n  // logic for elmination structures\n  const eventMatches = matchFx.eventMatches(legacyEvent, tournament, true);\n  // if tournament type is dual then matches need to be retrieved differently\n  const roundNames = matchFx.roundNames(tournament, legacyEvent);\n  const dfxMatches = dfx.matches(\n    legacyEvent.draw,\n    roundNames.names,\n    roundNames.calculated_names,\n    true\n  );\n  const matches = legacyDual ? dfxMatches : eventMatches;\n  const tieMatches = (legacyDual && eventMatches) || [];\n  const positionAssignments = [];\n  const seedAssignments = [];\n  const participantIds = [];\n  const entries = [];\n\n  const matchUpFormat = legacyEvent.matchFormat;\n\n  const matchUps = matches\n    .map((legacyMatch) => {\n      const result = processLegacyMatch({\n        entries,\n        tieFormat,\n        eventType,\n        matchUpFormat,\n        seedAssignments,\n\n        tieMatches,\n        legacyMatch,\n        participantIds,\n        participants,\n        entryStage,\n        seedLimit,\n        info,\n      });\n      if (result) {\n        const { matchUp, positionAssignments: matchUpAssignments } = result;\n        if (matchUpAssignments) positionAssignments.push(...matchUpAssignments);\n        return matchUp;\n      }\n      return undefined;\n    })\n    .filter((f) => f);\n\n  positionAssignments.sort((a, b) =>\n    a.drawPosition > b.drawPosition ? 1 : -1\n  );\n  seedAssignments.sort((a, b) => (a.seedNumber > b.seedNumber ? 1 : -1));\n\n  return {\n    entries,\n    matchUps,\n    seedLimit,\n    positionAssignments,\n    seedAssignments,\n    finishingPosition: ROUND_OUTCOME,\n  };\n}\n\nfunction roundRobinStructure({\n  tournament,\n  legacyEvent,\n  legacyDual,\n  participants,\n  entryStage,\n  seedLimit,\n  tieFormat,\n  eventType,\n  info,\n}) {\n  const eventMatches = matchFx.eventMatches(legacyEvent, tournament, true);\n  const tieMatches = (legacyDual && eventMatches) || [];\n\n  const structures = [];\n  const seedAssignments = [];\n  const participantIds = [];\n  const entries = [];\n\n  const matchUpFormat = legacyEvent.matchFormat;\n\n  legacyEvent.draw.brackets.forEach((bracket, index) => {\n    const drawPositionOffset = index * (legacyEvent.draw.bracket_size || 0);\n    const positionAssignments = [];\n    const matchUps = bracket.matches\n      .map((legacyMatch) => {\n        const result = processLegacyMatch({\n          seedAssignments,\n          entries,\n          eventType,\n          tieFormat,\n          matchUpFormat,\n          drawPositionOffset,\n          participantIds,\n          participants,\n          legacyMatch,\n          tieMatches,\n          entryStage,\n          seedLimit,\n          info,\n        });\n        if (result) {\n          const { matchUp, positionAssignments: matchUpAssignments } = result;\n          if (matchUpAssignments)\n            positionAssignments.push(...matchUpAssignments);\n          return matchUp;\n        }\n        return undefined;\n      })\n      .filter((f) => f);\n    const structureName = bracket.name || `Group ${index + 1}`;\n    const structure = {\n      structureType: ITEM,\n      structureId: UUID.generate(),\n      stageSequence: 1,\n      positionAssignments,\n      structureName,\n      matchUps,\n    };\n    structures.push(structure);\n  });\n\n  return {\n    entries,\n    seedLimit,\n    structures,\n    seedAssignments: [],\n    structureType: CONTAINER,\n    finishingPosition: WIN_RATIO,\n  };\n}\n\nfunction processLegacyMatch({\n  seedAssignments,\n  matchUpFormat,\n  tieFormat,\n  eventType,\n  entries,\n\n  drawPositionOffset,\n  participantIds,\n  participants,\n  legacyMatch,\n  tieMatches,\n  entryStage,\n  seedLimit,\n  info,\n}) {\n  const positionAssignments = [];\n  const isDualMatch = !!legacyMatch.dual_match;\n  const matchUpId = legacyMatch.match?.muid || legacyMatch.muid;\n  if (!legacyMatch.teams || isDualMatch) {\n    return {};\n  }\n\n  const roundNumberString =\n    matchFx.roundNumber({\n      match: legacyMatch.match,\n      info,\n    }) ||\n    legacyMatch.match?.round ||\n    legacyMatch?.round;\n  const roundNumber = !isNaN(parseInt(roundNumberString))\n    ? parseInt(roundNumberString)\n    : undefined;\n  const roundPositionString = matchFx.roundPosition({\n    match: legacyMatch.match,\n    info,\n  });\n  const roundPosition = !isNaN(parseInt(roundPositionString))\n    ? parseInt(roundPositionString)\n    : undefined;\n  const roundName =\n    legacyMatch.match?.calculated_round_name ||\n    legacyMatch.match?.round_name ||\n    legacyMatch?.round_name ||\n    \"\";\n\n  const tieMatchUps = tieMatches\n    .filter((tieMatch) => tieMatch.dual_match === matchUpId)\n    .map((tieMatch) => {\n      const { matchUp, missingParticipants } = extractMatchUp({\n        info,\n        tieFormat,\n        eventType,\n        seedLimit,\n        entryStage,\n        participants,\n        participantIds,\n        tournamentEngine,\n        legacyMatch: tieMatch,\n      });\n      Object.assign(matchUp, { roundName, roundNumber, roundPosition });\n      if (missingParticipants.length) console.log({ missingParticipants });\n      return matchUp;\n    });\n\n  const {\n    matchUp,\n    missingParticipants,\n    positionAssignments: matchUpPositionAssignments,\n    seedAssignments: matchUpSeedAssignments,\n    entries: matchUpEntries,\n  } = extractMatchUp({\n    info,\n    eventType,\n    seedLimit,\n    entryStage,\n    legacyMatch,\n    participants,\n    matchUpFormat,\n    participantIds,\n    tournamentEngine,\n    drawPositionOffset,\n  });\n  if (missingParticipants?.filter((f) => f).length)\n    console.log({ missingParticipants });\n\n  if (tieMatchUps) {\n    tieMatchUps.forEach((tieMatchUp) => {\n      const { collectionPosition, matchUpType, sides } = tieMatchUp;\n      const collectionDefinition = tieFormat?.collectionDefinitions.find(\n        (collectionDefinition) =>\n          collectionDefinition.matchUpType === matchUpType\n      );\n      const collectionId = collectionDefinition?.collectionId;\n      if (sides?.length) {\n        sides.forEach(({ participantId, sideNumber }) => {\n          const side = matchUp.sides.find(\n            (side) => side.sideNumber === sideNumber\n          );\n          if (!side.lineUp) side.lineUp = [];\n          const competitor = side.lineUp.find(\n            (competitor) => competitor.participantId === participantId\n          );\n          if (competitor) {\n            competitor.collectionAssignments.push({\n              collectionId,\n              collectionPosition,\n            });\n          } else {\n            const competitor = {\n              participantId,\n              collectionAssignments: [{ collectionId, collectionPosition }],\n            };\n            side.lineUp.push(competitor);\n          }\n        });\n      }\n    });\n  }\n\n  matchUpPositionAssignments.forEach((positionAssignment) =>\n    positionAssignments.push(positionAssignment)\n  );\n  matchUpSeedAssignments.forEach((seedAssignment) =>\n    seedAssignments.push(seedAssignment)\n  );\n  matchUpEntries.forEach((entry) => entries.push(entry));\n\n  Object.assign(matchUp, { roundName, roundNumber, roundPosition });\n  if (tieMatchUps.length) {\n    Object.assign(matchUp, { tieMatchUps });\n  }\n\n  return { matchUp, positionAssignments };\n}\n","import { drawDefinitionConstants } from \"tods-competition-factory\";\nimport { matchFormatCode } from \"./matchFormatCode\";\nimport { scoreFormat } from \"./scoreFormat\";\nimport { getStructureContent } from \"./getStructureContent\";\nimport { getStage } from \"./utilities\";\n\nexport function extractStructures({\n  eventType,\n  tieFormat,\n  tournament,\n  participants,\n  legacyEvents,\n  matchUpFormat,\n  mainStructureId,\n}) {\n  const entriesAccumulator = {};\n  const structures = legacyEvents.map((legacyEvent) => {\n    const {\n      entries,\n      matchUps,\n      seedLimit,\n      structures,\n      structureType,\n      finishingPosition,\n      seedAssignments,\n      positionAssignments,\n    } = getStructureContent({\n      eventType,\n      tieFormat,\n      tournament,\n      legacyEvent,\n      participants,\n    });\n    entries.forEach((entry) => {\n      entriesAccumulator[entry.participantId] = entry;\n    });\n\n    const stage =\n      legacyEvent.euid === mainStructureId\n        ? drawDefinitionConstants.MAIN\n        : getStage({ legacyEvent });\n\n    const structure = {\n      stage,\n      matchUps,\n      seedLimit,\n      finishingPosition,\n      seedAssignments,\n      positionAssignments,\n      stageSequence: 1,\n      structureId: legacyEvent.euid,\n      structureName: legacyEvent.name,\n    };\n    if (structures) structure.structures = structures;\n    if (structureType) structure.structureType = structureType;\n\n    const format = legacyEvent.score_format;\n    const formatCode =\n      legacyEvent.matchFormat ||\n      (format && matchFormatCode.stringify(scoreFormat.jsonTODS(format)));\n    if (formatCode || matchUpFormat)\n      structure.matchUpFormat = formatCode || matchUpFormat;\n\n    return structure;\n  });\n\n  const drawEntries = Object.values(entriesAccumulator);\n  return { structures, drawEntries };\n}\n","import { convertTieFormat } from \"./convertTieFormat\";\nimport { extractStructures } from \"./extractStructures\";\nimport { matchFormatCode } from \"./matchFormatCode\";\nimport { scoreFormat } from \"./scoreFormat\";\nimport {\n  tournamentEngine,\n  factoryConstants,\n  matchUpTypes,\n  utilities,\n} from \"tods-competition-factory\";\n\nimport {\n  getGender,\n  getSurface,\n  intersection,\n  getMatchUpType,\n  getIndoorOutdoor,\n  getAgeCategoryCode,\n} from \"./utilities\";\n\nexport function extractEvents({ tournament, participants }) {\n  const eventCategories = {};\n  const legacyEvents = tournament.events || [];\n  const tournamentRecord = { participants, tournamentId: \"foo\" };\n  tournamentEngine.setState(tournamentRecord);\n\n  // linkedStructures are events which have explicit links\n  const linkedStructures = {};\n\n  legacyEvents.forEach((legacyEvent) => {\n    const euid = legacyEvent.euid;\n    const eventIds = [euid];\n    legacyEvent.links &&\n      Object.keys(legacyEvent.links).forEach((key) => {\n        const linkedEuid = legacyEvent.links[key];\n        eventIds.push(linkedEuid);\n      });\n    const groupEuid = intersection(Object.keys(linkedStructures), eventIds);\n    if (groupEuid.length) {\n      linkedStructures[groupEuid[0]][euid] = legacyEvent;\n    } else {\n      linkedStructures[euid] = { [euid]: legacyEvent };\n    }\n  });\n\n  Object.keys(linkedStructures).forEach((key) => {\n    const structureGroup = linkedStructures[key];\n    const structureGroupIds = Object.keys(structureGroup);\n    const groupStructures = structureGroupIds.map((id) => structureGroup[id]);\n    const structureGroupDrawTypes = groupStructures.map(\n      (event) => event.draw_type\n    );\n    const mainDrawTypes = [\"E\", \"S\"];\n    if (!intersection(mainDrawTypes, structureGroupDrawTypes).length) {\n      if (structureGroupDrawTypes.includes(\"R\")) mainDrawTypes.push(\"R\");\n      else if (structureGroupDrawTypes.includes(\"A\")) mainDrawTypes.push(\"A\");\n      else if (structureGroupDrawTypes.includes(\"C\")) mainDrawTypes.push(\"C\");\n      else if (structureGroupDrawTypes.includes(\"Q\")) mainDrawTypes.push(\"Q\");\n      else if (structureGroupDrawTypes.includes(\"P\")) mainDrawTypes.push(\"P\");\n      else console.log(\"unlinked event\", { structureGroup });\n    }\n    const mainLegacyEvent = groupStructures.find((legacyEvent) =>\n      mainDrawTypes.includes(legacyEvent.draw_type)\n    );\n    const eventType =\n      getMatchUpType(mainLegacyEvent.format) ||\n      ((mainLegacyEvent.matchorder || tournament.type === \"dual\") &&\n        matchUpTypes.TEAM);\n    const ageCategoryCode = getAgeCategoryCode(mainLegacyEvent.category);\n    const category = { categoryName: mainLegacyEvent.category };\n    if (ageCategoryCode) category.ageCategoryCode = ageCategoryCode;\n\n    const {\n      name,\n      automated,\n      draw_size,\n      matchorder,\n      draw_created,\n      broadcast_name,\n      custom_category,\n      category: legacyCategory,\n    } = mainLegacyEvent;\n\n    const tieFormat =\n      mainLegacyEvent.matchorder && convertTieFormat(matchorder);\n\n    const format = mainLegacyEvent.score_format;\n    const matchUpFormat =\n      mainLegacyEvent.matchFormat ||\n      (format && matchFormatCode.stringify(scoreFormat.jsonTODS(format)));\n\n    const { structures, drawEntries: entries } = extractStructures({\n      eventType,\n      tieFormat,\n      tournament,\n      participants,\n      matchUpFormat,\n      mainStructureId: mainLegacyEvent.euid,\n      legacyEvents: groupStructures,\n    });\n\n    const drawDefinition = {\n      // entries for a drawDefinition needs to be aggregated from structures\n      drawId: utilities.UUID(),\n      drawName:\n        custom_category ||\n        broadcast_name ||\n        name ||\n        factoryConstants.drawDefinitionConstants.MAIN,\n      createdAt: draw_created && new Date(draw_created).toISOString(),\n      structures,\n      entries,\n    };\n\n    if (matchUpFormat) drawDefinition.matchUpFormat = matchUpFormat;\n\n    const drawProfile = {\n      automated,\n      drawSize: draw_size,\n      category: { categoryName: legacyCategory },\n    };\n\n    if (tieFormat) {\n      drawDefinition.tieFormat = tieFormat;\n      drawProfile.tieFormat = tieFormat;\n    }\n\n    const extension = {\n      name: \"drawProfile\",\n      value: drawProfile,\n    };\n    tournamentEngine.addDrawDefinitionExtension({ drawDefinition, extension });\n\n    const eventId = utilities.UUID();\n    const surfaceCategory = getSurface(mainLegacyEvent);\n    const indoorOutdoor = getIndoorOutdoor(mainLegacyEvent);\n    const gender = getGender(mainLegacyEvent.gender);\n    const eventRank = mainLegacyEvent.rank;\n\n    const categoryName = `${category.categoryName}-${gender}-${eventType}`;\n    if (!eventCategories[categoryName]) {\n      eventCategories[categoryName] = {\n        gender,\n        eventId,\n        category,\n        eventType,\n        eventRank,\n        eventName: categoryName,\n        drawDefinitions: [drawDefinition],\n      };\n      if (indoorOutdoor)\n        eventCategories[categoryName].indoorOutdoor = indoorOutdoor;\n      if (surfaceCategory)\n        eventCategories[categoryName].surfaceCategory = surfaceCategory;\n    } else {\n      eventCategories[categoryName].drawDefinitions.push(drawDefinition);\n      if (indoorOutdoor && !eventCategories[categoryName].indoorOutdoor)\n        eventCategories[categoryName].indoorOutdoor = indoorOutdoor;\n      if (surfaceCategory && !eventCategories[categoryName].surfaceCategory)\n        eventCategories[categoryName].surfaceCategory = surfaceCategory;\n    }\n  });\n\n  const events = Object.values(eventCategories);\n  events.forEach((event) => {\n    const entriesAccumulator = {};\n    event.drawDefinitions.forEach((drawDefinition) => {\n      drawDefinition.entries.forEach((entry) => {\n        entriesAccumulator[entry.participantId] = entry;\n      });\n    });\n    event.entries = Object.values(entriesAccumulator);\n  });\n\n  return { events };\n}\n","import { normalizeName } from \"normalize-text\";\nimport { getGender } from \"./utilities\";\nimport { matchFx } from \"./matchFx\";\nimport { format } from \"date-fns\";\nimport { drawFx } from \"./drawFx\";\n\nimport {\n  errorConditionConstants,\n  participantConstants,\n  participantRoles,\n  penaltyConstants,\n  scaleConstants,\n  utilities,\n} from \"tods-competition-factory\";\n\nconst dfx = drawFx();\n\nexport function extractParticipants({ tournament, file }) {\n  const individualParticipants = extractIndividualParticipants({ tournament });\n\n  const pairParticipants = extractPairParticipants({\n    participants: individualParticipants,\n    tournament,\n    file,\n  });\n\n  const teamParticipants = extractTeamParticipants({\n    tournament,\n    file,\n  });\n\n  const competitorParticipants = individualParticipants.concat(\n    ...pairParticipants,\n    ...teamParticipants\n  );\n\n  return { competitorParticipants };\n}\n\nfunction extractTeamParticipants({ tournament, file }) {\n  const teamParticipants = (tournament.teams || []).map((team) => {\n    const individualParticipantIds = Object.keys(team.players);\n    const teamParticipant = {\n      participantId: team.id,\n      participantType: participantConstants.TEAM,\n      participantRole: participantRoles.COMPETITOR,\n      individualParticipantIds,\n      participantName: team.name,\n    };\n    return teamParticipant;\n  });\n\n  return teamParticipants;\n}\n\nfunction extractPairParticipants({ tournament, participants, file }) {\n  const pairParticipants = [];\n  const legacyEvents = tournament.events || [];\n  const legacyDual = tournament.type === \"dual\";\n  const relevantEvents = legacyEvents.filter(\n    (legacyEvent) => legacyEvent.format === \"D\" || legacyDual\n  );\n  relevantEvents.forEach((legacyEvent) => {\n    const matches = matchFx.eventMatches(legacyEvent, tournament, true);\n    const teams = matches.map((match) => match.teams).flat();\n    teams\n      .filter((team) => Array.isArray(team) && team.length === 2)\n      .forEach((team) => {\n        const individualParticipants = team\n          .map((player) =>\n            participants.find((participant) => {\n              const matchingParticipantId =\n                participant.participantId === player?.id;\n              const foundInOtherIds = participant?.person?.personOtherIds?.find(\n                (otherId) => otherId.personId === player?.id\n              );\n              return matchingParticipantId || foundInOtherIds;\n            })\n          )\n          .filter((f) => f);\n        if (individualParticipants.length === 2) {\n          const participantName = individualParticipants\n            .map((participant) => participant.person.standardFamilyName)\n            .join(\"/\");\n          const individualParticipantIds = individualParticipants.map(\n            (participant) => participant.participantId\n          );\n          const pairParticipant = {\n            participantId: utilities.UUID(),\n            participantType: participantConstants.PAIR,\n            participantRole: participantRoles.COMPETITOR,\n            individualParticipantIds,\n            participantName,\n          };\n          pairParticipants.push(pairParticipant);\n        }\n      });\n  });\n\n  return pairParticipants;\n}\n\nfunction extractIndividualParticipants({ tournament }) {\n  const individualParticipants = [];\n  const individualParticipantIds = [];\n  const players = tournament.players || [];\n\n  const tournamentStartDate =\n    tournament.start && format(new Date(tournament.start), \"yyyy-MM-dd\");\n  const tournamentCategory = tournament.category;\n  const organisationId = tournament.org?.ouid;\n\n  function addParticipant(player) {\n    const participantId = player.id || player.puid;\n    const standardFamilyName = getName(player.last_name);\n    const standardGivenName = getName(player.first_name);\n    const participantName = `${standardFamilyName.toUpperCase()}, ${standardGivenName}`;\n    const birthDate =\n      isValidDate(player.birth) && format(new Date(player.birth), \"yyyy-MM-dd\");\n\n    const participant = {\n      participantName,\n      participantId,\n      participantType: participantConstants.INDIVIDUAL,\n      participantRole: participantRoles.COMPETITOR,\n      timeItems: [],\n      person: {\n        personId: participantId,\n        standardFamilyName,\n        standardGivenName,\n        sex: getGender(player.sex),\n        nationalityCode: player.ioc,\n        birthDate,\n        otherNames: [],\n      },\n    };\n\n    addSignInStatus({ player, participant, tournamentStartDate });\n    addOtherNames({ player, participant });\n    addOtherIds({ player, participant, organisationId });\n    addRankings({\n      player,\n      participant,\n      tournamentStartDate,\n      tournamentCategory,\n    });\n    addRatings({ player, participant, tournamentStartDate });\n    addPenalties({ player, participant, tournamentStartDate });\n\n    if (!individualParticipantIds.includes(participant.participantId)) {\n      individualParticipants.push(participant);\n      individualParticipantIds.push(participantId);\n    }\n  }\n\n  players.forEach(addParticipant);\n\n  const relevantEvents = tournament.events?.filter((event) => event.draw) || [];\n  // check that there are no individual participants in draws that are not in tournament.players\n  relevantEvents.forEach((event) => {\n    const matches = dfx.matches(event.draw);\n    const players = matches.map((matchUp) => matchUp.teams).flat(Infinity);\n    // players which have .players are team participants\n    players.filter((f) => f && !f.players).forEach(addParticipant);\n  });\n\n  return individualParticipants;\n}\n\nfunction isValidDate(date) {\n  if (!date) return;\n  try {\n    const dateObject = new Date(date);\n    if (dateObject.trim() === errorConditionConstants.INVALID_DATE) {\n      return false;\n    }\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction getName(text) {\n  return normalizeName(text || \"\", [\"de\", \"la\", \"da\"]);\n}\n\nfunction addOtherNames({ player, participant }) {\n  if (player.nickname) participant.person.otherNames.push(player.nickname);\n}\nfunction addOtherIds({ player, participant, organisationId }) {\n  if (player.cropin) {\n    const personOtherIds = [\n      {\n        organisationId,\n        uniqueOrganisationName: \"HTS\",\n        personId: player.cropin,\n      },\n    ];\n    participant.person.personOtherIds = personOtherIds;\n  }\n  if (player.id && player.puid && player.puid !== player.id) {\n    if (!participant.person.personOtherIds)\n      participant.person.personOtherIds = [];\n    const otherId = {\n      organisationId,\n      uniqueOrganisationName: \"System\",\n      personId: player.puid,\n    };\n    participant.person.personOtherIds.push(otherId);\n  }\n}\n\nfunction addRankings({\n  player,\n  participant,\n  tournamentStartDate,\n  tournamentCategory,\n}) {\n  if (player.rankings) {\n    Object.keys(player.rankings).forEach((key) => {\n      const itemType = `${scaleConstants.SCALE}.${scaleConstants.RANKING}.SINGLES.${key}`;\n      const timeItem = {\n        itemType,\n        itemValue: player.rankings[key],\n        timestamp: tournamentStartDate,\n      };\n      participant.timeItems.push(timeItem);\n    });\n  }\n  if (player.category_dbls && tournamentCategory) {\n    const itemType = `${scaleConstants.SCALE}.${scaleConstants.RANKING}.SINGLES.${tournamentCategory}`;\n    const timeItem = {\n      itemType,\n      itemValue: player.category_dbls,\n      timestamp: tournamentStartDate,\n    };\n    participant.timeItems.push(timeItem);\n  }\n}\n\nfunction addRatings({ player, participant, tournamentStartDate }) {\n  if (player.ratings) {\n    Object.keys(player.ratings).forEach((key) => {\n      Object.keys(player.ratings[key]).forEach((ratingType) => {\n        const itemType = `${scaleConstants.SCALE}.${\n          scaleConstants.RATING\n        }.${ratingType.toUpperCase()}.${key.toUpperCase()}`;\n        const timeItem = {\n          itemType,\n          itemValue: player.ratings[key][ratingType].value,\n          timestamp: tournamentStartDate,\n        };\n        if (timeItem.itemValue) participant.timeItems.push(timeItem);\n      });\n    });\n  }\n}\n\nfunction addSignInStatus({ player, participant, tournamentStartDate }) {\n  const itemValue = player.signed_in\n    ? participantConstants.SIGNED_IN\n    : participantConstants.SIGNED_OUT;\n  const timeItem = {\n    itemSubject: participantConstants.SIGN_IN_STATUS,\n    timeStamp: tournamentStartDate,\n    itemValue,\n  };\n  participant.timeItems.push(timeItem);\n}\n\nfunction addPenalties({ player, participant, tournamentStartDate }) {\n  if (player.penalties) {\n    participant.penalties = [];\n    player.penalties.forEach((penalty) => {\n      const penaltyTime =\n        (isValidDate(penalty.time) && penalty.time) || tournamentStartDate;\n      const penaltyId = utilities.UUID();\n      const penaltyItem = {\n        penaltyId,\n        matchUpId: penalty.muid,\n        penaltyType: getPenaltyType(penalty),\n        notes: penalty.penalty?.label,\n        createdAt: new Date(penaltyTime).toISOString(),\n      };\n      participant.penalties.push(penaltyItem);\n      // TODO: add to matchUp.timeItems\n      /*\n      const timeItem = {\n        itemSubject: \"PENALTY\",\n        itemValue: penaltyItem.penaltyId,\n        timeStamp: penaltyItem.createdAt\n      };\n      */\n    });\n  }\n\n  function getPenaltyType(penalty) {\n    if (penalty.penalty?.value === \"unsporting\")\n      return penaltyConstants.UNSPORTSMANLIKE_CONDUCT;\n    if (penalty.penalty?.value === \"fail2signout\")\n      return penaltyConstants.FAILURE_TO_COMPLETE;\n    if (penalty.penalty?.value === \"illegalcoaching\")\n      return penaltyConstants.COACHING;\n    if (penalty.penalty?.value === \"ballabuse\")\n      return penaltyConstants.BALL_ABUSE;\n    if (penalty.penalty?.value === \"racquetabuse\")\n      return penaltyConstants.RACKET_ABUSE;\n    if (penalty.penalty?.value === \"equipmentabuse\")\n      return penaltyConstants.EQUIMENT_VIOLATION;\n    if (penalty.penalty?.value === \"cursing\")\n      return penaltyConstants.UNSPORTSMANLIKE_CONDUCT;\n    if (penalty.penalty?.value === \"rudegestures\")\n      return penaltyConstants.UNSPORTSMANLIKE_CONDUCT;\n    if (penalty.penalty?.value === \"foullanguage\")\n      return penaltyConstants.UNSPORTSMANLIKE_CONDUCT;\n    if (penalty.penalty?.value === \"timeviolation\")\n      return penaltyConstants.PUNCTUALITY;\n    if (penalty.penalty?.value === \"latearrival\")\n      return penaltyConstants.PUNCTUALITY;\n  }\n}\n","import { getIndoorOutdoor, getSurface } from \"./utilities\";\nimport {\n  participantConstants,\n  participantRoles,\n  utilities,\n} from \"tods-competition-factory\";\nimport { format } from \"date-fns\";\n\n/*\norganisation = club\norganizers\nlocation\n*/\n\nexport function extractTournamentInfo({ tournament, file }) {\n  const tournamentId = tournament.tuid;\n  const organisationId = tournament.org?.ouid;\n\n  const venues = getLocations(tournament);\n  const surfaceCategory = getSurface(tournament);\n  const indoorOutdoor = getIndoorOutdoor(tournament);\n  const onlineResources = getOnlineResources(tournament);\n\n  const tournamentInfo = {\n    tournamentId,\n    tournamentName: tournament.name,\n    startDate:\n      tournament.start &&\n      new Date(format(new Date(tournament.start), \"yyyy-MM-dd\")).toISOString(),\n    endDate:\n      tournament.end &&\n      new Date(format(new Date(tournament.end), \"yyyy-MM-dd\")).toISOString(),\n    parentOrganisationId: organisationId,\n    unifiedTournamentId: {\n      tournamentId,\n      organisationId,\n      organisationName: tournament.org?.name,\n      organisationAbbreviation: tournament.org?.abbr,\n    },\n  };\n  if (venues) tournamentInfo.venues = venues;\n  if (tournament.notes) tournamentInfo.notes = tournament.notes;\n  if (indoorOutdoor) tournamentInfo.indoorOutdoor = indoorOutdoor;\n  if (onlineResources) tournamentInfo.onlineResources = onlineResources;\n  if (surfaceCategory) tournamentInfo.surfaceCategory = surfaceCategory;\n\n  const organisationParticipants = [\n    getRefereeParticipant(tournament.judge),\n    (tournament.umpires || []).map((umpire) => getRefereeParticipant(umpire)),\n  ].filter((f) => f);\n  return { tournamentInfo, organisationParticipants };\n}\n\nfunction getOnlineResources(tournament) {\n  const social = tournament.media?.social || {};\n  const sponsorImages = tournament.publishing?.sponsors || [];\n\n  const onlineResources = Object.keys(social).map((provider) => {\n    const identifier = social[provider];\n    const onlineResource = {\n      provider,\n      identifier,\n      type: \"SOCIAL_MEDIA\",\n    };\n    return onlineResource;\n  });\n\n  sponsorImages.forEach((identifier) => {\n    const onlineResource = {\n      identifier,\n      type: \"SPONSOR\",\n      subType: \"LOGO\",\n    };\n    onlineResources.push(onlineResource);\n  });\n\n  return onlineResources;\n}\n\nfunction getLocations(tournament) {\n  const range = (start, end) =>\n    Array.from({ length: end - start }, (v, k) => k + start);\n  const venues = (tournament.locations || []).map((location) => {\n    const venueId = location.luid;\n    const venueAbbreviation = location.abbreviation;\n    const courts = range(0, parseInt(location.courts)).map((index) => {\n      const identifier =\n        (location.identifiers && location.identifiers[index]) || index + 1;\n      const courtName = `${venueAbbreviation} ${identifier}`;\n      const court = {\n        courtName,\n        courtId: `${venueId}-${index}`,\n      };\n      return court;\n    });\n    const venue = {\n      courts,\n      venueId,\n      venueAbbreviation,\n      venueName: location.name,\n      addresses: [\n        {\n          addressType: \"VENUE\",\n          latitude: location.latitide,\n          longitude: location.longitude,\n          addressLine1: location.address,\n        },\n      ],\n    };\n    return venue;\n  });\n  return venues;\n}\n\nfunction getRefereeParticipant(referee) {\n  if (!referee) return;\n  const [standardGivenName, standardFamilyName] = referee.split(\" \");\n\n  const participantId = utilities.UUID();\n  return {\n    name: referee,\n    participantId,\n    participantType: participantConstants.INDIVIDUAL,\n    participantRole: participantRoles.OFFICIAL,\n    person: {\n      personId: participantId,\n      standardFamilyName,\n      standardGivenName,\n    },\n  };\n}\n","import { extractEvents } from \"./extractEvents\";\nimport { extractParticipants } from \"./extractParticipants\";\nimport { extractTournamentInfo } from \"./extractTournamentInfo\";\n\n// collectionDefinitions, ratings category ranges (event.ratings_filter: { high: #, low: #}), Round Robins\n// player Representatives\n// Compressed draw structures... with D3 visualizations works fine... may not work with React-draws\n// drawEngine.buildDrawHierarchy is not handling pre-round structures which have only one children[] attribute rather than true hierarchy\n\nexport function getTournamentRecordTODS({ tournament }) {\n  const { tournamentInfo, organisationParticipants } = extractTournamentInfo({\n    tournament,\n  });\n  const { competitorParticipants } = extractParticipants({\n    tournament,\n  });\n\n  const participants = competitorParticipants.concat(\n    ...organisationParticipants\n  );\n\n  const { events } = extractEvents({ tournament, participants });\n\n  const tournamentRecord = {\n    ...tournamentInfo,\n    participants,\n    events,\n  };\n\n  return { tournamentRecord };\n}\n\nexport default getTournamentRecordTODS;\n"],"names":["convertTieFormat","matchorder","matchUpTypes","utilities","unique","map","format","toUpperCase","collectionDefinitions","matchUpType","collectionMatchUps","filter","order","collectionValue","value","parseFloat","isNaN","reduce","a","b","collectionValueProfile","matchUp","index","collectionPosition","matchUpValue","collectionDefinition","matchUpsCount","length","collectionName","collectionId","UUID","valuesDiffer","totalTieValue","valueGoal","Math","floor","winCriteria","SET","NOAD","TIMED","FINAL","NORMAL","setTypes","S","F","matchFormatCode","fx","stringify","matchformatobject","timed","minutes","timedFormat","bestOf","setFormat","best_of","getNumber","normal_set","stringifySet","normalSet","final_set","finalSetFormat","finalSet","invalid","valid","f","join","setobject","tiebreakSet","tiebreakFormat","setTo","NoAD","set_tiebreak","setTiebreak","tiebreak_at","tiebreakAt","tieobject","tiebreakTo","parse","matchformatcode","type","indexOf","timedMatch","setsMatch","formatstring","parts","split","slice","parseSetFormat","validBestOf","validFinalSet","validSetsFormat","result","set_type","set_format","parseTiebreakFormat","match","isNoAD","validNoAD","parseTiebreakAt","validTiebreakAt","validTiebreak","noTiebreak","tiebreak_to","timestring","Number","scoreFormat","jsonTODS","score_format","tods","max_sets","parseInt","final_set_supertiebreak","supertiebreak_to","games_for_set","tiebreaks_at","tiereaks_at","dateFx","localizeDate","date","date_localization","locale","default_localization","weekday","year","month","day","toLocaleDateString","timeSort","as","splitTime","bs","hours","o","time","ampm","militaryTime","env","schedule","default_time","toLowerCase","regularTime","convertTime","time24","addWeek","now","Date","setDate","getDate","subtractWeek","getDateByWeek","week","d","dayNum","getDay","requiredDate","HHMMSS","s","sec_num","seconds","display_seconds","pad_hours","weekDays","dates","i","dayOfWeek","diff","ymd2date","ymd","formatDate","separator","offsetTime","getMonth","getFullYear","offsetDate","targetTime","tzDifference","getTimezoneOffset","getTime","validDate","datestring","range","dateparts","start","end","isDate","dateArg","t","valueOf","isValidDateRange","minDate","maxDate","timeUTC","dateDate","UTC","dateFromDay","randomDate","random","dateRange","startDt","endDt","error","between","iterations","keep_looping","console","log","currentDate","push","sameDay","d1","d2","futureDate","days","extractMatchUp","eventType","seedLimit","tieFormat","entryStage","legacyMatch","participants","matchUpFormat","participantIds","drawPositionOffset","tournamentEngine","matchUpId","muid","sides","entries","seedAssignments","missingParticipants","positionAssignments","isBye","Array","isArray","teams","forEach","team","participantId","individualParticipantIds","player","id","player1","player2","drawPosition","draw_position","seed","bye","getPairedParticipant","participant","addParticipant","participantType","participantRole","side","sideNumber","includes","entry","entryStatus","entryStatusConstants","DIRECT_ACCEPTANCE","positionAssignment","seedAssignment","seedNumber","seedValue","find","scoreString","score","reversedScoreString","reverseScore","winner_index","undefined","winner","winningSide","scoreStringSide1","matchTiebreakTODS","scoreStringSide2","sets","mocksEngine","parseScoreString","live","interrupted","incomplete","walkover","cancelled","abandoned","defaulted","retired","matchUpStatus","matchUpStatusConstants","IN_PROGRESS","SUSPENDED","INCOMPLETE","WALKOVER","NOT_PLAYED","ABANDONED","DEFAULTED","RETIRED","BYE","COMPLETED","TO_BE_PLAYED","timeItems","getTimeItems","drawPositions","formatCode","matchFormat","sequence","umpire","luid","timeItem","itemType","itemValue","timeStamp","toISOString","startTime","properTime","startDateTime","endTime","endDateTime","tournamentOfficials","participantConstants","INDIVIDUAL","participantRoles","OFFICIAL","official","name","military","zeroPad","number","toString","part","set","matchTiebreak","irreversible","reversed","parseSet","divider","set_scores","parseSetScore","reverse","set_games","games","tb_scores","tiebreak","set_score","ss","sst","test","exec","surfaceCategoryMap","C","H","G","R","getSurface","element","surface","getIndoorOutdoor","inout","intersection","n","e","c","getAgeCategoryCode","category","categoryCodeMap","U10","U12","U14","U16","U18","Senior","getMatchUpType","eventConstants","SINGLES","DOUBLES","getGender","genderConstants","MIXED","FEMALE","MALE","getStage","legacyEvent","stageMap","E","drawDefinitionConstants","MAIN","Q","QUALIFYING","CONSOLATION","P","PLAY_OFF","A","draw_type","Object","keys","links","typeCheck","tc","FEED","BACKDRAW","isActiveEvent","active","isAdHoc","isPlayoff","isQualifying","isRoundRobin","isConsolation","isElimination","hasEliminationStructure","isCompass","direction","draw","compass","isFeedIn","structure","isBackdraw","hasRoundNames","isConsolationFeedIn","isConsolationBackdraw","isConsolationFixed","isSingles","isDoubles","isTeam","tournament","dual_draw","dual_matches","event_type","isPreRound","qualifying_bracket_seeding","drawFx","approved","qualifiers","draw_size","courtData","max_matches_per_court","courts","safeArr","locations","l","identifiers","identifier","court","abbreviation","availability","ctuuid","x","k","from","v","scoreFx","validInt","assignKeys","source","objects","target","assign","setsToWin","ceil","isFinalSet","setTiebreakTo","finalSetTiebreakTo","getExistingScores","es","convertStringScore","string_score","generateMatchFormat","cfg_obj","bestof","ddlb","getValue","sets_to_win","setsto","tiebreaksat","tiebreaksto","supertiebreakto","finalset","getScoringFormat","scoring_format","defaultMatchFormat","matchFormats","scoreboard","formats","D","categories","singles","outcome","match_format","scores","m","tbscore","min_games","min","sf","spacer","st","supertiebreak","outome","self","lut","getWindow","window","formatUuid","d0","d3","getRandomValuesFunc","crypto","getRandomValues","dvals","Uint32Array","idGen","generate","playersHash","players","p","sort","opts","numArr","count","_","arr","item","lastIndexOf","indices","val","occurrences","r","randomPop","array","splice","subSort","sortFx","concat","standard_draws","draw_sizes","validDrawSize","rr_h2h_priority","compressed_draw_formats","compressed","byes_adjacent_to_seeds","seedBlocks","seed_limits","bye_placement","seedPositions","separation","keyWalk","options","acceptedDrawSizes","num_players","standardSizes","forceCompressed","standardDrawSize","treeDrawMatchOrder","mtz","matches","bracketMatches","bracket_index","brackets","bracket","teamsHash","uniqueTeam","pruneDefunctMatches","findMissingMatches","match_ups","teamMatchups","matchup","existing_match_ups","defunct","emu","pairing","obsolete","teamMissingMatches","addTeamMatch","round_name","ids","team_matchups","matches_hash","missing","tm","opponents","matchups","roundRobinRounds","event","rounds","rrbr","bracketRounds","qualifying","max_rounds","max","br","bracketMatchups","round","matchhashes","calcBracketRounds","positions","a_row","b_row","j","a_head","shift","a_down","pop","b_up","bracketDrawPositions","bracket_size","position","rrInfo","draw_positions","byes","total","total_matches","seed_placements","placements","unfinished_seed_placements","unseeded_placements","u","bye_placements","hashFx","h","p_hash","unfilled_positions","completed_brackets","bracketComplete","complete","positions_filled","unseeded_teams","unplaced_seeds","open_seed_positions","placed_seeds","seeded_teams","compassInfo","all_matches","match_nodes","upcoming_match_nodes","unassigned","directions","info","treeInfo","collapseHierarchy","node","depth","_height","height","_children","children","expandHierarchy","collapse","calc_tree","draw_hierarchy","maxTreeDepth","nodes","descendants","data","structural_byes","matchNode","bye_nodes","teamMatch","double_bye_nodes","byeNode","max_round","qualifierChild","doubles","dp","qualifier","seeds","final_round","final_round_players","assignments","assigned_positions","validMatch","byeChild","replaceDrawPlayer","existing_player","new_player_data","opponent_team","checkReplacePlayer","key","placement","dm","dual_match","loser","drawRounds","bin","d2b","dec","calcFeedBase","p2","sByes","feedDrawSize","skip_rounds","feed_rounds","burn","calcFeedSize","first_round_size","feed_capacity","skip_reduce","draw_rounds","possible_feed_rounds","feed_diff","feed_reduce","pow","drawInfo","blankDraw","offset","addByes","max_draw_position","walkNode","descent","addBye","child","structuralByes","bit_flip","cluster_size","clusters","cluster","bye_positions","odd","dispersion","values","div2","buildRound","tree","fed","pos","child1","child2","nuid","feedRound","remaining","feed_arm","feed","feedInDraw","team_count","total_rounds","up2","buildDraw","buildQualDraw","num_qualifiers","group_size","section_size","sections","assignPosition","propagate","assigned","findPositionNode","cdpi","advancePosition","onlyIfBye","position_node","advanceToNode","teamIsBye","matchDrawPositions","advanced","current_match","draw_matches","match_draw_positions","next_round_match","next_round_score","next_round_draw_positions","containsByeTeam","opponent_is_bye","advance","modifyPositionScore","target_node","findMatchNodeByTeamPositions","schedulePosition","venue","seedBlock","seed_block","inSeedBlock","lower","higher","total_players","evt","limit","event_seed_limit","threshold","roundrobinSeedPlacements","bracket_count","seeded_team_keys","auto_placed_seeds","random_placed_seeds","seed_index","qualifyingBracketSeeding","validSeedPlacements","random_sort","seed_limit","qualifying_draw","playerPositions","seed_positions","distributeByes","target_byes","current_draw","randomBinary","paired_positions","pairs_no_seed","pairs_with_seed","bp","prescribed","filtered_pairs","adjacent_pairs","sb","parent","structural_seed_order","adjacent_to_seeds","assignment","pairs_no_seed_or_bye","pair","flat_pairs","getBye","rand","rrByeDistribution","unplacedTeams","unplaced_unseeded","rrUnseededPlacements","randomRRunseededSeparation","randomRRunseededDistribution","exit","bracketTeams","unplaced_teams","team_diff","placeTeam","pushBracketTeam","distributeQualifiers","unassigned_positions","section","dprange","available_positions","seededTeams","placeSeedGroups","placeSeedGroup","group_index","seed_group","nextSeedGroup","missing_seeds","opponent","unplaced","unplacedSeedGroups","sp","roundMatches","round_matches","placeUnseededTeams","randomUnseededSeparation","randomUnseededDistribution","findCandidate","sortNumber","structural_bye_positions","largestGroup","unpairedPositions","findOpponent","opponent_teams","grouping_positions","groupingPosition","opponent_groupings","opponent_grouping_positions","gp","all_positions","chunk_sizes","nearestPow2","chunks","size","chunkArray","vetted","chunkRow","group_not_present","row","group_present","no_group_unpaired","unpaired","no_group_unassigned","viable_sections","unplaced_opponents","groupings","grouping","teamGrouping","max_length","min_length","groupings_meets_max","groupings_meets_min","random_group","random_opponent","true_positions","truePosition","pairAssigned","true_position","true_pair","checkChunk","chunk","g","chunksize","all","one","ch","isEven","opponent_id","matchNodes","matchTeams","feedNode","feed_arms","feedNodes","byeTeams","includeQualifiers","isAteam","drawPositionsWithBye","replaceEmptiesWithByes","advanceTeamsWithByes","unadvanced","unadvanced_dp","bye_dp","unadvanced_player_dp","unadvanced_double_byes","hasBye","findDualMatchNodeByMatch","dual_match_muid","findDualMatchMuid","findDualMatchNode","y","findRRDualMatch","match_node","match_positions","upcomingMatches","round_names","calculated_round_names","upcomingCompassMatches","round_offset","treeMatches","potentials","calculated_round_name","dependencies","dependent","this_match","compass_data","pre","east","west","north","south","northeast","northwest","southeast","southwest","names","compassMatches","extractDrawPlayers","result_order","tallyBracketAndModifyPlayers","per_player","reset","tbr","tallyBracket","instanceCount","qordz","team_results","qorder","ic","valid_for_suborder","results_order","match_result_order","phash","sub_order","points_order","results","matches_won","matches_lost","sets_won","sets_lost","games_won","games_lost","points_won","points_lost","matches_ratio","sets_ratio","games_ratio","points_ratio","ratio_hash","bracket_match_format","bracket_complete","disqualified","h2h","wH","getIdentifier","lH","team1","team2","checkTeam","matches_cancelled","disqualifyingScore","defeats","victories","sets_tally","countSets","games_tally","countGames","points_tally","countPoints","bracket_sets_to_win","bracket_games_for_set","sets_numerator","sets_denominator","sets_total","Infinity","matches_numerator","matches_denominator","games_numerator","games_denominator","games_total","games_difference","determineTeamOrder","ro_list","rank_order","id_order","walkedOver","min_winning_games","total_sets","loser_lead_set","tallied_games","complement","getComplement","team_ids","total_opponents","team_id","order_hash","orderHash","ratioHash","wins","counts","h2hOrder","orderHashSort","hash_order","rank_hash","h2hRatio","ratioHashSort","ratio_order","h2h_a","h2h_b","rh","valuesObject","optionsObject","vKeys","oKeys","oo","vo","constructor","matchFx","dfx","activeTeamPlayers","events","tournamentEventMatches","completed_matches","pending_matches","upcoming_matches","matchPlayers","pc","flatten","winners","losers","match_players","opponentsInclude","include_ids","removeMatchSchedule","opponent_ids","event_matches","eventMatches","drawTypeSort","ordered_events","oe","eventMatchStorageObjects","upcoming","localeCompare","draw_format","replace","matchStorageObject","upcomingEventMatches","team_players","match_teams","team0","coords","loc","latitude","longitude","obj","consolation","location","gender","delegated_score","status","tuid","org","rank","euid","custom_category","matchOutcome","player_won","winning_ids","winning_team","losing_team","losing_ids","pindex","fullName","last_name","first_name","scheduledMatches","scheduled","roundNames","calculated_names","checkScheduledMatches","dualMatchMatches","containsGUIDplayer","GUIDplayers","findEventByID","qlink","addMUIDs","court_names","ct","check_names","oop_round","court_matches","after","eventRoundConsolationReady","with_team","getLuckyLosers","evnt","all_rounds","ll_all_rounds","qualifying_ids","qualified","q","losing_players","addMUID","determineGender","genders","sex","matchTime","matchRound","matchDate","datePDF","matchDesignator","matchDateDisplay","displayDate","matchDuration","duration","getSeconds","hm","mod","getNum","roundPosition","backdrawTarget","match_round","backdraw_target","muids","roundNumber","DrawStructure","match_node_depth","rr_round","matchFinish","matchCourt","matchScore","non_breaking","scr","isByeMatch","idInMatch","timestamp","flat","toFlatten","CONTAINER","ITEM","ROUND_OUTCOME","WIN_RATIO","getStructureContent","legacyDual","totalPlayers","feed_base","props","roundRobinStructure","eliminationStructure","dfxMatches","tieMatches","matchUps","processLegacyMatch","matchUpAssignments","finishingPosition","structures","structureName","structureType","structureId","stageSequence","isDualMatch","roundNumberString","roundPositionString","roundName","tieMatchUps","tieMatch","matchUpPositionAssignments","matchUpSeedAssignments","matchUpEntries","tieMatchUp","lineUp","competitor","collectionAssignments","extractStructures","legacyEvents","mainStructureId","entriesAccumulator","stage","drawEntries","extractEvents","eventCategories","tournamentRecord","tournamentId","setState","linkedStructures","eventIds","linkedEuid","groupEuid","structureGroup","structureGroupIds","groupStructures","structureGroupDrawTypes","mainDrawTypes","mainLegacyEvent","TEAM","ageCategoryCode","categoryName","automated","draw_created","broadcast_name","legacyCategory","drawDefinition","drawId","drawName","factoryConstants","createdAt","drawProfile","drawSize","extension","addDrawDefinitionExtension","eventId","surfaceCategory","indoorOutdoor","eventRank","eventName","drawDefinitions","extractParticipants","file","individualParticipants","extractIndividualParticipants","pairParticipants","extractPairParticipants","teamParticipants","extractTeamParticipants","competitorParticipants","teamParticipant","COMPETITOR","participantName","relevantEvents","matchingParticipantId","foundInOtherIds","person","personOtherIds","otherId","personId","standardFamilyName","pairParticipant","PAIR","tournamentStartDate","tournamentCategory","organisationId","ouid","puid","getName","standardGivenName","birthDate","isValidDate","birth","nationalityCode","ioc","otherNames","addSignInStatus","addOtherNames","addOtherIds","addRankings","addRatings","addPenalties","dateObject","trim","errorConditionConstants","INVALID_DATE","err","text","normalizeName","nickname","cropin","uniqueOrganisationName","rankings","scaleConstants","SCALE","RANKING","category_dbls","ratings","ratingType","RATING","signed_in","SIGNED_IN","SIGNED_OUT","itemSubject","SIGN_IN_STATUS","penalties","penalty","penaltyTime","penaltyId","penaltyItem","penaltyType","getPenaltyType","notes","label","penaltyConstants","UNSPORTSMANLIKE_CONDUCT","FAILURE_TO_COMPLETE","COACHING","BALL_ABUSE","RACKET_ABUSE","EQUIMENT_VIOLATION","PUNCTUALITY","extractTournamentInfo","venues","getLocations","onlineResources","getOnlineResources","tournamentInfo","tournamentName","startDate","endDate","parentOrganisationId","unifiedTournamentId","organisationName","organisationAbbreviation","abbr","organisationParticipants","getRefereeParticipant","judge","umpires","social","media","sponsorImages","publishing","sponsors","provider","onlineResource","subType","venueId","venueAbbreviation","courtName","courtId","venueName","addresses","addressType","latitide","addressLine1","address","referee","getTournamentRecordTODS"],"mappings":"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"}